program	:	function
		|	function program
		;

function:	FUNC ID LPAREN arg_list RPAREN return_f locals block
		|FUNC ID LPAREN RPAREN return_f locals block
		;

return_f : COLON type
			 | 
       ;

block : BEGIN statements END
      ;  


arg_list:	var COMMA arg_list
		| var
	  ;

locals	:	local_list SEMICOLON locals
		|
		;

local_list	: 	var
						|   var_dec_as
		;

var		:	ID COLON TYPE
		;


var_dec_as	:	ID COLONEQUAL types
						|	ID COLONEQUAL expression
			     ;


statement	:	controlstructure SEMICOLON statement
		|	instruction SEMICOLON statement
		|
		;

controlstructure	:	cif
				|	cwhile
				;

cwhile  : 	WHILE LPAREN conditional RPAREN DO block SEMICOLON
		 		;


cif	:	IF LPAREN conditional RPAREN THEN block else SEMICOLON
		;

else : ELSE statement 
		 | 
		 ;	

conditional : bool_expr OR bool_expr
						| bool_expr AND bool_expr
						| NOT bool_expr
						| bool_expr
					  ;

bool_expr	: expression GREATER expression
			| expression LESS expression
			| expression GREATEREQUAL expression
			| expression LESSEQUAL expression
			| expression DIFFERENT expression
			| expression EQUIVALENT expression
			| BOOLEAN
			;

expression	: 	expression PLUS prod
		|	expression MINUS Pprod
		|	prod
			;

prod	:	prod MULTIPLY term
	|	prod DIVIDE term
	|	term
		;

term	:	ID | FLOAT | INTEGER | LPAREN expression RPAREN
		|INT_TYPE LPAREN ID RPAREN
		|FLOAT_TYPE LPAREN ID RPAREN
		;
		
instruction :	write_d 
			      | line_if 
						| line_while
						| return_d 
						| print_d
						| assignation
						| SKIP 
	          | BREAK
					  | call_d
		;

return : RETURN expression
		;

print_d : PRINT LPAREN expression RPAREN
				| PRINT LPAREN STRING RPAREN
		    ;

read_d:		READ LPAREN ID RPAREN
		;

write_d : WRITE LPAREN expression RPAREN
				| WRITE LPAREN STRING RPAREN
		;

call_d : ID LPAREN list_var RPAREN
			 ;

list_var : ID list_var
				 | expression list_var
				 | 
				 ;

type  : INT_TYPE 
			| FLOAT_TYPE
			| STRING_TYPE
			| BOOLEAN_TYPE
			;
		

line_if : IF bool_expr THEN instruction
			  ;

line_while : WHILE bool_expr DO instruction
			  ;

assignation : ID EQUAL expression
			      ;

RETURN: 'return';

PRINT: 'print';

SKIP: 'skip'; 

READ: 'read';

WRITE: 'write';	
		 		
IF 		: 'if
		;	 
ELSE 	: 'else'
	 	;
WHILE 	: 'while'
	  	;
VAR 	: 'var'
		;
CONST 	: 'const'
		;
DO 		: 'do'
		;
THEN	: 'then'
		;
FUNC 	: 'func'
		;
EXTERN	: 'extern'
		;
PRINT	: 'print'
		;
BEGIN 	: 'begin'
		;
INT_TYPE: 'int'
		;
FLOAT_TYPE:	'float'
		  ;
BOOLEAN_TYPE : 'boolean'
			 ;

STRING_TYPE	: 'string'
			;
PLUS 		: '\+'
MINUS 		: '-'
TIMES	 	: '\*'
DIVIDE		: '/'
ASSIGN		: '='
SEMI	 	: ';'
COLON	 	: ':'
COLONEQUAL	: ':='
LPAREN		: '\('
RPAREN		: '\)'
LSBRACKET 	: '\['
RSBRACKET 	: '\]'
COMMA	 	: ','
LT			: '<'
LE			: '<='
EQ			: '=='
GE			: '>='
GT			: '>'
NE			: '!='
LAND	  	: '&&'
LOR	   		: '\|\|'
LNOT	  	: '!'
		
ID 			: '[a-zA-Z_]\w*'
BOOLEAN 	: '(true|false)'
STRING 		: '"[^\n]*?(?<!\\)"'
FLOAT		: '((\d*\.\d+)([eE][-+]?\d+)?)|(\d+\.\d*)|(\d+)([eE][-+]?\d+)'	
INTEGER 	: '(?:0[xX]?)?\d+'
3
