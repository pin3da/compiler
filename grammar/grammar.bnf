program	:	function
		|	function program
		;

function:	FUNC ID LPAREN args RPAREN locals BEGIN statement END
		|FUNC ID LPAREN RPAREN locals BEGIN statement END
		;

args	:	var COMMA args --> AQUI ESTA LA DUDA!
		| var
		;

locals	:	varass SEMICOLON locals
		|
		;

varass	: 	var
		|assignation
		;

var		:	ID COLON TYPE
		;


assignation	:	ID COLONEQUAL INTEGER
			|	ID COLONEQUAL FLOAT
			|	ID COLONEQUAL STRING
			|	ID COLONEQUAL BOOLEAN
			|	ID COLONEQUAL ID
			|	ID COLONEQUAL expression
			;


statement	:	controlstructure statement
		|	instruction statement
		|
		;

controlstructure	:	cif
				|	cwhile
				;

cwhile	: 	WHILE LPAREN conditional RPAREN DO BEGIN statement END SEMICOLON
		|	WHILE conditional DO BEGIN statement END SEMICOLON
		|	WHILE LPAREN conditional RPAREN DO instruction
		|	WHILE conditional DO instruction 
		;


cif	:	IF LPAREN conditional RPAREN THEN BEGIN statement END SEMICOLON
	|	IF conditional THEN BEGIN statement END SEMICOLON
	|	IF LPAREN conditional RPAREN THEN instruction 
	|	IF conditional THEN instruction 
	;

conditional	: expression GREATER expression
			| expression LESS expression
			| expression GREATEREQUAL expression
			| expression LESSEQUAL expression
			| expression DIFFERENT expression
			| expression EQUIVALENT expression
			| BOOLEAN
			;

expression	: 	expression PLUS prod
		|	expression MINUS Pprod
		|	prod
			;

prod	:	prod MULTIPLY term
	|	prod DIVIDE term
	|	term
		;

term	:	ID | FLOAT | INTEGER | LPAREN expression RPAREN
		|INT_TYPE LPAREN ID RPAREN
		|FLOAT_TYPE LPAREN ID RPAREN
		;
		
instruction:	return | print | assignation | SKIP | read | write | ID LPAREN args RPAREN | BREAK
		;

return: 	RETURN INTEGER
		|RETURN FLOAT
		|RETURN STRING
		|RETURN ID
		|RETURN expression
		;

print: 		PRINT LPAREN STRING RPAREN
		|PRINT LPAREN FLOAT RPAREN
		|PRINT LPAREN INTEGER RPAREN
		|PRINT LPAREN BOOLEAN RPAREN
		;

read:		READ LPAREN expression RPAREN
		;

write: 		WRITE LPAREN expression RPAREN
		;
		

function_main:	FUN MAIN LPAREN RPAREN locals BEGIN (statementlist)* END
		;

RETURN: 'return';

PRINT: 'print';

SKIP: 'skip'; 

READ: 'read';

WRITE: 'write';	
		 		
IF 		: 'if
		;	 
ELSE 	: 'else'
	 	;
WHILE 	: 'while'
	  	;
VAR 	: 'var'
		;
CONST 	: 'const'
		;
DO 		: 'do'
		;
THEN	: 'then'
		;
FUNC 	: 'func'
		;
EXTERN	: 'extern'
		;
PRINT	: 'print'
		;
BEGIN 	: 'begin'
		;
INT_TYPE: 'int'
		;
FLOAT_TYPE:	'float'
		  ;
BOOLEAN_TYPE : 'boolean'
			 ;

STRING_TYPE	: 'string'
			;
PLUS 		: '\+'
MINUS 		: '-'
TIMES	 	: '\*'
DIVIDE		: '/'
ASSIGN		: '='
SEMI	 	: ';'
COLON	 	: ':'
COLONEQUAL	: ':='
LPAREN		: '\('
RPAREN		: '\)'
LSBRACKET 	: '\['
RSBRACKET 	: '\]'
COMMA	 	: ','
LT			: '<'
LE			: '<='
EQ			: '=='
GE			: '>='
GT			: '>'
NE			: '!='
LAND	  	: '&&'
LOR	   		: '\|\|'
LNOT	  	: '!'
		
ID 			: '[a-zA-Z_]\w*'
BOOLEAN 	: '(true|false)'
STRING 		: '"[^\n]*?(?<!\\)"'
FLOAT		: '((\d*\.\d+)([eE][-+]?\d+)?)|(\d+\.\d*)|(\d+)([eE][-+]?\d+)'	
INTEGER 	: '(?:0[xX]?)?\d+'
3
