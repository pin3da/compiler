Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> listadefuns
Rule 2     listadefuns -> funcion
Rule 3     listadefuns -> listadefuns funcion
Rule 4     funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones end
Rule 5     funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones PYC end
Rule 6     argsop -> argumentos
Rule 7     argsop -> empty
Rule 8     argumentos -> defvar
Rule 9     argumentos -> argumentos COMA defvar
Rule 10    argumentos -> argumentos defvar
Rule 11    argumentos -> error
Rule 12    localesop -> locales
Rule 13    localesop -> empty
Rule 14    locales -> defvar PYC
Rule 15    locales -> funcion PYC
Rule 16    locales -> locales defvar PYC
Rule 17    locales -> locales funcion PYC
Rule 18    locales -> error
Rule 19    defvar -> ID DOSPUNT tipo
Rule 20    defvar -> ID tipo
Rule 21    tipo -> int
Rule 22    tipo -> float
Rule 23    tipo -> int CORI expresion CORD
Rule 24    tipo -> float CORI expresion CORD
Rule 25    declaracion -> while relacion do declaracion
Rule 26    declaracion -> ifthen
Rule 27    declaracion -> ifthenelse
Rule 28    declaracion -> ubicacion ASIG expresion
Rule 29    declaracion -> print PARI CADENA PARD
Rule 30    declaracion -> write PARI expresion PARD
Rule 31    declaracion -> read PARI ubicacion PARD
Rule 32    declaracion -> return expresion
Rule 33    declaracion -> ID PARI listadeexpresionesop PARD
Rule 34    declaracion -> skip
Rule 35    declaracion -> break
Rule 36    declaracion -> begin listadeclaraciones end
Rule 37    declaracion -> begin end
Rule 38    ifthen -> if relacion then declaracion
Rule 39    ifthenelse -> if relacion then declaracion else declaracion
Rule 40    ifthen -> if relacion declaracion
Rule 41    ifthen -> if relacion declaracion else declaracion
Rule 42    listadeclaraciones -> declaracion
Rule 43    listadeclaraciones -> listadeclaraciones PYC declaracion
Rule 44    listadeclaraciones -> listadeclaraciones declaracion
Rule 45    ubicacion -> ID
Rule 46    ubicacion -> ID CORI expresion CORD
Rule 47    expresion -> expresion SUMA expresion
Rule 48    expresion -> expresion RESTA expresion
Rule 49    expresion -> expresion MULTI expresion
Rule 50    expresion -> expresion DIVIDIR expresion
Rule 51    expresion -> RESTA expresion
Rule 52    expresion -> SUMA expresion
Rule 53    expresion -> PARI expresion PARD
Rule 54    expresion -> ID PARI listadeexpresionesop PARD
Rule 55    expresion -> ID
Rule 56    expresion -> ID CORI expresion CORD
Rule 57    expresion -> numero
Rule 58    expresion -> int PARI expresion PARD
Rule 59    expresion -> float PARI expresion PARD
Rule 60    listadeexpresionesop -> listadeexpresiones
Rule 61    listadeexpresionesop -> empty
Rule 62    listadeexpresiones -> expresion
Rule 63    listadeexpresiones -> listadeexpresiones COMA expresion
Rule 64    relacion -> expresion MENQ expresion
Rule 65    relacion -> expresion MENIG expresion
Rule 66    relacion -> expresion MAYQ expresion
Rule 67    relacion -> expresion MAYIG expresion
Rule 68    relacion -> expresion IGU expresion
Rule 69    relacion -> expresion DIF expresion
Rule 70    relacion -> relacion and relacion
Rule 71    relacion -> relacion or relacion
Rule 72    relacion -> not relacion
Rule 73    relacion -> PARI relacion PARD
Rule 74    relacion -> error
Rule 75    numero -> ENTERO
Rule 76    numero -> REAL
Rule 77    empty -> <empty>

Terminals, with rules where they appear

ASIG                 : 28
CADENA               : 29
COMA                 : 9 63
CORD                 : 23 24 46 56
CORI                 : 23 24 46 56
DIF                  : 69
DIVIDIR              : 50
DOSPUNT              : 19
ENTERO               : 75
ID                   : 4 5 19 20 33 45 46 54 55 56
IGU                  : 68
MAYIG                : 67
MAYQ                 : 66
MENIG                : 65
MENQ                 : 64
MULTI                : 49
PARD                 : 4 5 29 30 31 33 53 54 58 59 73
PARI                 : 4 5 29 30 31 33 53 54 58 59 73
PYC                  : 5 14 15 16 17 43
REAL                 : 76
RESTA                : 48 51
SUMA                 : 47 52
and                  : 70
begin                : 4 5 36 37
break                : 35
do                   : 25
else                 : 39 41
end                  : 4 5 36 37
error                : 11 18 74
float                : 22 24 59
fun                  : 4 5
if                   : 38 39 40 41
int                  : 21 23 58
not                  : 72
or                   : 71
print                : 29
read                 : 31
return               : 32
skip                 : 34
then                 : 38 39
while                : 25
write                : 30

Nonterminals, with rules where they appear

argsop               : 4 5
argumentos           : 6 9 10
declaracion          : 25 38 39 39 40 41 41 42 43 44
defvar               : 8 9 10 14 16
empty                : 7 13 61
expresion            : 23 24 28 30 32 46 47 47 48 48 49 49 50 50 51 52 53 56 58 59 62 63 64 64 65 65 66 66 67 67 68 68 69 69
funcion              : 2 3 15 17
ifthen               : 26
ifthenelse           : 27
listadeclaraciones   : 4 5 36 43 44
listadeexpresiones   : 60 63
listadeexpresionesop : 33 54
listadefuns          : 1 3
locales              : 12 16 17
localesop            : 4 5
numero               : 57
program              : 0
relacion             : 25 38 39 40 41 70 70 71 71 72 73
tipo                 : 19 20
ubicacion            : 28 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . listadefuns
    (2) listadefuns -> . funcion
    (3) listadefuns -> . listadefuns funcion
    (4) funcion -> . fun ID PARI argsop PARD localesop begin listadeclaraciones end
    (5) funcion -> . fun ID PARI argsop PARD localesop begin listadeclaraciones PYC end

    fun             shift and go to state 3

    listadefuns                    shift and go to state 1
    program                        shift and go to state 2
    funcion                        shift and go to state 4

state 1

    (1) program -> listadefuns .
    (3) listadefuns -> listadefuns . funcion
    (4) funcion -> . fun ID PARI argsop PARD localesop begin listadeclaraciones end
    (5) funcion -> . fun ID PARI argsop PARD localesop begin listadeclaraciones PYC end

    $end            reduce using rule 1 (program -> listadefuns .)
    fun             shift and go to state 3

    funcion                        shift and go to state 5

state 2

    (0) S' -> program .



state 3

    (4) funcion -> fun . ID PARI argsop PARD localesop begin listadeclaraciones end
    (5) funcion -> fun . ID PARI argsop PARD localesop begin listadeclaraciones PYC end

    ID              shift and go to state 6


state 4

    (2) listadefuns -> funcion .

    fun             reduce using rule 2 (listadefuns -> funcion .)
    $end            reduce using rule 2 (listadefuns -> funcion .)


state 5

    (3) listadefuns -> listadefuns funcion .

    fun             reduce using rule 3 (listadefuns -> listadefuns funcion .)
    $end            reduce using rule 3 (listadefuns -> listadefuns funcion .)


state 6

    (4) funcion -> fun ID . PARI argsop PARD localesop begin listadeclaraciones end
    (5) funcion -> fun ID . PARI argsop PARD localesop begin listadeclaraciones PYC end

    PARI            shift and go to state 7


state 7

    (4) funcion -> fun ID PARI . argsop PARD localesop begin listadeclaraciones end
    (5) funcion -> fun ID PARI . argsop PARD localesop begin listadeclaraciones PYC end
    (6) argsop -> . argumentos
    (7) argsop -> . empty
    (8) argumentos -> . defvar
    (9) argumentos -> . argumentos COMA defvar
    (10) argumentos -> . argumentos defvar
    (11) argumentos -> . error
    (77) empty -> .
    (19) defvar -> . ID DOSPUNT tipo
    (20) defvar -> . ID tipo

    error           shift and go to state 10
    PARD            reduce using rule 77 (empty -> .)
    ID              shift and go to state 12

    argsop                         shift and go to state 8
    defvar                         shift and go to state 9
    argumentos                     shift and go to state 11
    empty                          shift and go to state 13

state 8

    (4) funcion -> fun ID PARI argsop . PARD localesop begin listadeclaraciones end
    (5) funcion -> fun ID PARI argsop . PARD localesop begin listadeclaraciones PYC end

    PARD            shift and go to state 14


state 9

    (8) argumentos -> defvar .

    COMA            reduce using rule 8 (argumentos -> defvar .)
    ID              reduce using rule 8 (argumentos -> defvar .)
    PARD            reduce using rule 8 (argumentos -> defvar .)


state 10

    (11) argumentos -> error .

    COMA            reduce using rule 11 (argumentos -> error .)
    ID              reduce using rule 11 (argumentos -> error .)
    PARD            reduce using rule 11 (argumentos -> error .)


state 11

    (6) argsop -> argumentos .
    (9) argumentos -> argumentos . COMA defvar
    (10) argumentos -> argumentos . defvar
    (19) defvar -> . ID DOSPUNT tipo
    (20) defvar -> . ID tipo

    PARD            reduce using rule 6 (argsop -> argumentos .)
    COMA            shift and go to state 16
    ID              shift and go to state 12

    defvar                         shift and go to state 15

state 12

    (19) defvar -> ID . DOSPUNT tipo
    (20) defvar -> ID . tipo
    (21) tipo -> . int
    (22) tipo -> . float
    (23) tipo -> . int CORI expresion CORD
    (24) tipo -> . float CORI expresion CORD

    DOSPUNT         shift and go to state 20
    int             shift and go to state 18
    float           shift and go to state 19

    tipo                           shift and go to state 17

state 13

    (7) argsop -> empty .

    PARD            reduce using rule 7 (argsop -> empty .)


state 14

    (4) funcion -> fun ID PARI argsop PARD . localesop begin listadeclaraciones end
    (5) funcion -> fun ID PARI argsop PARD . localesop begin listadeclaraciones PYC end
    (12) localesop -> . locales
    (13) localesop -> . empty
    (14) locales -> . defvar PYC
    (15) locales -> . funcion PYC
    (16) locales -> . locales defvar PYC
    (17) locales -> . locales funcion PYC
    (18) locales -> . error
    (77) empty -> .
    (19) defvar -> . ID DOSPUNT tipo
    (20) defvar -> . ID tipo
    (4) funcion -> . fun ID PARI argsop PARD localesop begin listadeclaraciones end
    (5) funcion -> . fun ID PARI argsop PARD localesop begin listadeclaraciones PYC end

    error           shift and go to state 24
    begin           reduce using rule 77 (empty -> .)
    ID              shift and go to state 12
    fun             shift and go to state 3

    defvar                         shift and go to state 21
    locales                        shift and go to state 25
    localesop                      shift and go to state 23
    empty                          shift and go to state 22
    funcion                        shift and go to state 26

state 15

    (10) argumentos -> argumentos defvar .

    COMA            reduce using rule 10 (argumentos -> argumentos defvar .)
    ID              reduce using rule 10 (argumentos -> argumentos defvar .)
    PARD            reduce using rule 10 (argumentos -> argumentos defvar .)


state 16

    (9) argumentos -> argumentos COMA . defvar
    (19) defvar -> . ID DOSPUNT tipo
    (20) defvar -> . ID tipo

    ID              shift and go to state 12

    defvar                         shift and go to state 27

state 17

    (20) defvar -> ID tipo .

    PYC             reduce using rule 20 (defvar -> ID tipo .)
    COMA            reduce using rule 20 (defvar -> ID tipo .)
    ID              reduce using rule 20 (defvar -> ID tipo .)
    PARD            reduce using rule 20 (defvar -> ID tipo .)


state 18

    (21) tipo -> int .
    (23) tipo -> int . CORI expresion CORD

    COMA            reduce using rule 21 (tipo -> int .)
    ID              reduce using rule 21 (tipo -> int .)
    PARD            reduce using rule 21 (tipo -> int .)
    PYC             reduce using rule 21 (tipo -> int .)
    CORI            shift and go to state 28


state 19

    (22) tipo -> float .
    (24) tipo -> float . CORI expresion CORD

    COMA            reduce using rule 22 (tipo -> float .)
    ID              reduce using rule 22 (tipo -> float .)
    PARD            reduce using rule 22 (tipo -> float .)
    PYC             reduce using rule 22 (tipo -> float .)
    CORI            shift and go to state 29


state 20

    (19) defvar -> ID DOSPUNT . tipo
    (21) tipo -> . int
    (22) tipo -> . float
    (23) tipo -> . int CORI expresion CORD
    (24) tipo -> . float CORI expresion CORD

    int             shift and go to state 18
    float           shift and go to state 19

    tipo                           shift and go to state 30

state 21

    (14) locales -> defvar . PYC

    PYC             shift and go to state 31


state 22

    (13) localesop -> empty .

    begin           reduce using rule 13 (localesop -> empty .)


state 23

    (4) funcion -> fun ID PARI argsop PARD localesop . begin listadeclaraciones end
    (5) funcion -> fun ID PARI argsop PARD localesop . begin listadeclaraciones PYC end

    begin           shift and go to state 32


state 24

    (18) locales -> error .

    ID              reduce using rule 18 (locales -> error .)
    fun             reduce using rule 18 (locales -> error .)
    begin           reduce using rule 18 (locales -> error .)


state 25

    (12) localesop -> locales .
    (16) locales -> locales . defvar PYC
    (17) locales -> locales . funcion PYC
    (19) defvar -> . ID DOSPUNT tipo
    (20) defvar -> . ID tipo
    (4) funcion -> . fun ID PARI argsop PARD localesop begin listadeclaraciones end
    (5) funcion -> . fun ID PARI argsop PARD localesop begin listadeclaraciones PYC end

    begin           reduce using rule 12 (localesop -> locales .)
    ID              shift and go to state 12
    fun             shift and go to state 3

    defvar                         shift and go to state 33
    funcion                        shift and go to state 34

state 26

    (15) locales -> funcion . PYC

    PYC             shift and go to state 35


state 27

    (9) argumentos -> argumentos COMA defvar .

    COMA            reduce using rule 9 (argumentos -> argumentos COMA defvar .)
    ID              reduce using rule 9 (argumentos -> argumentos COMA defvar .)
    PARD            reduce using rule 9 (argumentos -> argumentos COMA defvar .)


state 28

    (23) tipo -> int CORI . expresion CORD
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 36
    numero                         shift and go to state 41

state 29

    (24) tipo -> float CORI . expresion CORD
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 46
    numero                         shift and go to state 41

state 30

    (19) defvar -> ID DOSPUNT tipo .

    PYC             reduce using rule 19 (defvar -> ID DOSPUNT tipo .)
    COMA            reduce using rule 19 (defvar -> ID DOSPUNT tipo .)
    ID              reduce using rule 19 (defvar -> ID DOSPUNT tipo .)
    PARD            reduce using rule 19 (defvar -> ID DOSPUNT tipo .)


state 31

    (14) locales -> defvar PYC .

    ID              reduce using rule 14 (locales -> defvar PYC .)
    fun             reduce using rule 14 (locales -> defvar PYC .)
    begin           reduce using rule 14 (locales -> defvar PYC .)


state 32

    (4) funcion -> fun ID PARI argsop PARD localesop begin . listadeclaraciones end
    (5) funcion -> fun ID PARI argsop PARD localesop begin . listadeclaraciones PYC end
    (42) listadeclaraciones -> . declaracion
    (43) listadeclaraciones -> . listadeclaraciones PYC declaracion
    (44) listadeclaraciones -> . listadeclaraciones declaracion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    listadeclaraciones             shift and go to state 51
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 61

state 33

    (16) locales -> locales defvar . PYC

    PYC             shift and go to state 62


state 34

    (17) locales -> locales funcion . PYC

    PYC             shift and go to state 63


state 35

    (15) locales -> funcion PYC .

    ID              reduce using rule 15 (locales -> funcion PYC .)
    fun             reduce using rule 15 (locales -> funcion PYC .)
    begin           reduce using rule 15 (locales -> funcion PYC .)


state 36

    (23) tipo -> int CORI expresion . CORD
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    CORD            shift and go to state 64
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 37

    (58) expresion -> int . PARI expresion PARD

    PARI            shift and go to state 69


state 38

    (76) numero -> REAL .

    PARD            reduce using rule 76 (numero -> REAL .)
    SUMA            reduce using rule 76 (numero -> REAL .)
    RESTA           reduce using rule 76 (numero -> REAL .)
    MULTI           reduce using rule 76 (numero -> REAL .)
    DIVIDIR         reduce using rule 76 (numero -> REAL .)
    CORD            reduce using rule 76 (numero -> REAL .)
    MENQ            reduce using rule 76 (numero -> REAL .)
    MENIG           reduce using rule 76 (numero -> REAL .)
    MAYQ            reduce using rule 76 (numero -> REAL .)
    MAYIG           reduce using rule 76 (numero -> REAL .)
    IGU             reduce using rule 76 (numero -> REAL .)
    DIF             reduce using rule 76 (numero -> REAL .)
    end             reduce using rule 76 (numero -> REAL .)
    PYC             reduce using rule 76 (numero -> REAL .)
    while           reduce using rule 76 (numero -> REAL .)
    print           reduce using rule 76 (numero -> REAL .)
    write           reduce using rule 76 (numero -> REAL .)
    read            reduce using rule 76 (numero -> REAL .)
    return          reduce using rule 76 (numero -> REAL .)
    ID              reduce using rule 76 (numero -> REAL .)
    skip            reduce using rule 76 (numero -> REAL .)
    break           reduce using rule 76 (numero -> REAL .)
    begin           reduce using rule 76 (numero -> REAL .)
    if              reduce using rule 76 (numero -> REAL .)
    else            reduce using rule 76 (numero -> REAL .)
    COMA            reduce using rule 76 (numero -> REAL .)
    then            reduce using rule 76 (numero -> REAL .)
    and             reduce using rule 76 (numero -> REAL .)
    or              reduce using rule 76 (numero -> REAL .)
    do              reduce using rule 76 (numero -> REAL .)


state 39

    (59) expresion -> float . PARI expresion PARD

    PARI            shift and go to state 70


state 40

    (53) expresion -> PARI . expresion PARD
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 71
    numero                         shift and go to state 41

state 41

    (57) expresion -> numero .

    MENQ            reduce using rule 57 (expresion -> numero .)
    MENIG           reduce using rule 57 (expresion -> numero .)
    MAYQ            reduce using rule 57 (expresion -> numero .)
    MAYIG           reduce using rule 57 (expresion -> numero .)
    IGU             reduce using rule 57 (expresion -> numero .)
    DIF             reduce using rule 57 (expresion -> numero .)
    SUMA            reduce using rule 57 (expresion -> numero .)
    RESTA           reduce using rule 57 (expresion -> numero .)
    MULTI           reduce using rule 57 (expresion -> numero .)
    DIVIDIR         reduce using rule 57 (expresion -> numero .)
    then            reduce using rule 57 (expresion -> numero .)
    and             reduce using rule 57 (expresion -> numero .)
    or              reduce using rule 57 (expresion -> numero .)
    while           reduce using rule 57 (expresion -> numero .)
    print           reduce using rule 57 (expresion -> numero .)
    write           reduce using rule 57 (expresion -> numero .)
    read            reduce using rule 57 (expresion -> numero .)
    return          reduce using rule 57 (expresion -> numero .)
    ID              reduce using rule 57 (expresion -> numero .)
    skip            reduce using rule 57 (expresion -> numero .)
    break           reduce using rule 57 (expresion -> numero .)
    begin           reduce using rule 57 (expresion -> numero .)
    if              reduce using rule 57 (expresion -> numero .)
    do              reduce using rule 57 (expresion -> numero .)
    PARD            reduce using rule 57 (expresion -> numero .)
    COMA            reduce using rule 57 (expresion -> numero .)
    CORD            reduce using rule 57 (expresion -> numero .)
    end             reduce using rule 57 (expresion -> numero .)
    PYC             reduce using rule 57 (expresion -> numero .)
    else            reduce using rule 57 (expresion -> numero .)


state 42

    (51) expresion -> RESTA . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 72
    numero                         shift and go to state 41

state 43

    (54) expresion -> ID . PARI listadeexpresionesop PARD
    (55) expresion -> ID .
    (56) expresion -> ID . CORI expresion CORD

    PARI            shift and go to state 74
    MENQ            reduce using rule 55 (expresion -> ID .)
    MENIG           reduce using rule 55 (expresion -> ID .)
    MAYQ            reduce using rule 55 (expresion -> ID .)
    MAYIG           reduce using rule 55 (expresion -> ID .)
    IGU             reduce using rule 55 (expresion -> ID .)
    DIF             reduce using rule 55 (expresion -> ID .)
    SUMA            reduce using rule 55 (expresion -> ID .)
    RESTA           reduce using rule 55 (expresion -> ID .)
    MULTI           reduce using rule 55 (expresion -> ID .)
    DIVIDIR         reduce using rule 55 (expresion -> ID .)
    then            reduce using rule 55 (expresion -> ID .)
    and             reduce using rule 55 (expresion -> ID .)
    or              reduce using rule 55 (expresion -> ID .)
    while           reduce using rule 55 (expresion -> ID .)
    print           reduce using rule 55 (expresion -> ID .)
    write           reduce using rule 55 (expresion -> ID .)
    read            reduce using rule 55 (expresion -> ID .)
    return          reduce using rule 55 (expresion -> ID .)
    ID              reduce using rule 55 (expresion -> ID .)
    skip            reduce using rule 55 (expresion -> ID .)
    break           reduce using rule 55 (expresion -> ID .)
    begin           reduce using rule 55 (expresion -> ID .)
    if              reduce using rule 55 (expresion -> ID .)
    do              reduce using rule 55 (expresion -> ID .)
    PARD            reduce using rule 55 (expresion -> ID .)
    COMA            reduce using rule 55 (expresion -> ID .)
    CORD            reduce using rule 55 (expresion -> ID .)
    end             reduce using rule 55 (expresion -> ID .)
    PYC             reduce using rule 55 (expresion -> ID .)
    else            reduce using rule 55 (expresion -> ID .)
    CORI            shift and go to state 73


state 44

    (52) expresion -> SUMA . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 75
    numero                         shift and go to state 41

state 45

    (75) numero -> ENTERO .

    PARD            reduce using rule 75 (numero -> ENTERO .)
    SUMA            reduce using rule 75 (numero -> ENTERO .)
    RESTA           reduce using rule 75 (numero -> ENTERO .)
    MULTI           reduce using rule 75 (numero -> ENTERO .)
    DIVIDIR         reduce using rule 75 (numero -> ENTERO .)
    CORD            reduce using rule 75 (numero -> ENTERO .)
    MENQ            reduce using rule 75 (numero -> ENTERO .)
    MENIG           reduce using rule 75 (numero -> ENTERO .)
    MAYQ            reduce using rule 75 (numero -> ENTERO .)
    MAYIG           reduce using rule 75 (numero -> ENTERO .)
    IGU             reduce using rule 75 (numero -> ENTERO .)
    DIF             reduce using rule 75 (numero -> ENTERO .)
    end             reduce using rule 75 (numero -> ENTERO .)
    PYC             reduce using rule 75 (numero -> ENTERO .)
    while           reduce using rule 75 (numero -> ENTERO .)
    print           reduce using rule 75 (numero -> ENTERO .)
    write           reduce using rule 75 (numero -> ENTERO .)
    read            reduce using rule 75 (numero -> ENTERO .)
    return          reduce using rule 75 (numero -> ENTERO .)
    ID              reduce using rule 75 (numero -> ENTERO .)
    skip            reduce using rule 75 (numero -> ENTERO .)
    break           reduce using rule 75 (numero -> ENTERO .)
    begin           reduce using rule 75 (numero -> ENTERO .)
    if              reduce using rule 75 (numero -> ENTERO .)
    else            reduce using rule 75 (numero -> ENTERO .)
    COMA            reduce using rule 75 (numero -> ENTERO .)
    then            reduce using rule 75 (numero -> ENTERO .)
    and             reduce using rule 75 (numero -> ENTERO .)
    or              reduce using rule 75 (numero -> ENTERO .)
    do              reduce using rule 75 (numero -> ENTERO .)


state 46

    (24) tipo -> float CORI expresion . CORD
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    CORD            shift and go to state 76
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 47

    (34) declaracion -> skip .

    end             reduce using rule 34 (declaracion -> skip .)
    PYC             reduce using rule 34 (declaracion -> skip .)
    while           reduce using rule 34 (declaracion -> skip .)
    print           reduce using rule 34 (declaracion -> skip .)
    write           reduce using rule 34 (declaracion -> skip .)
    read            reduce using rule 34 (declaracion -> skip .)
    return          reduce using rule 34 (declaracion -> skip .)
    ID              reduce using rule 34 (declaracion -> skip .)
    skip            reduce using rule 34 (declaracion -> skip .)
    break           reduce using rule 34 (declaracion -> skip .)
    begin           reduce using rule 34 (declaracion -> skip .)
    if              reduce using rule 34 (declaracion -> skip .)
    else            reduce using rule 34 (declaracion -> skip .)


state 48

    (26) declaracion -> ifthen .

    end             reduce using rule 26 (declaracion -> ifthen .)
    PYC             reduce using rule 26 (declaracion -> ifthen .)
    while           reduce using rule 26 (declaracion -> ifthen .)
    print           reduce using rule 26 (declaracion -> ifthen .)
    write           reduce using rule 26 (declaracion -> ifthen .)
    read            reduce using rule 26 (declaracion -> ifthen .)
    return          reduce using rule 26 (declaracion -> ifthen .)
    ID              reduce using rule 26 (declaracion -> ifthen .)
    skip            reduce using rule 26 (declaracion -> ifthen .)
    break           reduce using rule 26 (declaracion -> ifthen .)
    begin           reduce using rule 26 (declaracion -> ifthen .)
    if              reduce using rule 26 (declaracion -> ifthen .)
    else            reduce using rule 26 (declaracion -> ifthen .)


state 49

    (38) ifthen -> if . relacion then declaracion
    (40) ifthen -> if . relacion declaracion
    (41) ifthen -> if . relacion declaracion else declaracion
    (39) ifthenelse -> if . relacion then declaracion else declaracion
    (64) relacion -> . expresion MENQ expresion
    (65) relacion -> . expresion MENIG expresion
    (66) relacion -> . expresion MAYQ expresion
    (67) relacion -> . expresion MAYIG expresion
    (68) relacion -> . expresion IGU expresion
    (69) relacion -> . expresion DIF expresion
    (70) relacion -> . relacion and relacion
    (71) relacion -> . relacion or relacion
    (72) relacion -> . not relacion
    (73) relacion -> . PARI relacion PARD
    (74) relacion -> . error
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    not             shift and go to state 79
    PARI            shift and go to state 77
    error           shift and go to state 81
    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 80
    numero                         shift and go to state 41
    relacion                       shift and go to state 78

state 50

    (30) declaracion -> write . PARI expresion PARD

    PARI            shift and go to state 82


state 51

    (4) funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones . end
    (5) funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones . PYC end
    (43) listadeclaraciones -> listadeclaraciones . PYC declaracion
    (44) listadeclaraciones -> listadeclaraciones . declaracion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    end             shift and go to state 83
    PYC             shift and go to state 84
    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 85

state 52

    (29) declaracion -> print . PARI CADENA PARD

    PARI            shift and go to state 86


state 53

    (36) declaracion -> begin . listadeclaraciones end
    (37) declaracion -> begin . end
    (42) listadeclaraciones -> . declaracion
    (43) listadeclaraciones -> . listadeclaraciones PYC declaracion
    (44) listadeclaraciones -> . listadeclaraciones declaracion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    end             shift and go to state 87
    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    listadeclaraciones             shift and go to state 88
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 61

state 54

    (32) declaracion -> return . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 89
    numero                         shift and go to state 41

state 55

    (27) declaracion -> ifthenelse .

    end             reduce using rule 27 (declaracion -> ifthenelse .)
    PYC             reduce using rule 27 (declaracion -> ifthenelse .)
    while           reduce using rule 27 (declaracion -> ifthenelse .)
    print           reduce using rule 27 (declaracion -> ifthenelse .)
    write           reduce using rule 27 (declaracion -> ifthenelse .)
    read            reduce using rule 27 (declaracion -> ifthenelse .)
    return          reduce using rule 27 (declaracion -> ifthenelse .)
    ID              reduce using rule 27 (declaracion -> ifthenelse .)
    skip            reduce using rule 27 (declaracion -> ifthenelse .)
    break           reduce using rule 27 (declaracion -> ifthenelse .)
    begin           reduce using rule 27 (declaracion -> ifthenelse .)
    if              reduce using rule 27 (declaracion -> ifthenelse .)
    else            reduce using rule 27 (declaracion -> ifthenelse .)


state 56

    (31) declaracion -> read . PARI ubicacion PARD

    PARI            shift and go to state 90


state 57

    (35) declaracion -> break .

    end             reduce using rule 35 (declaracion -> break .)
    PYC             reduce using rule 35 (declaracion -> break .)
    while           reduce using rule 35 (declaracion -> break .)
    print           reduce using rule 35 (declaracion -> break .)
    write           reduce using rule 35 (declaracion -> break .)
    read            reduce using rule 35 (declaracion -> break .)
    return          reduce using rule 35 (declaracion -> break .)
    ID              reduce using rule 35 (declaracion -> break .)
    skip            reduce using rule 35 (declaracion -> break .)
    break           reduce using rule 35 (declaracion -> break .)
    begin           reduce using rule 35 (declaracion -> break .)
    if              reduce using rule 35 (declaracion -> break .)
    else            reduce using rule 35 (declaracion -> break .)


state 58

    (28) declaracion -> ubicacion . ASIG expresion

    ASIG            shift and go to state 91


state 59

    (33) declaracion -> ID . PARI listadeexpresionesop PARD
    (45) ubicacion -> ID .
    (46) ubicacion -> ID . CORI expresion CORD

    PARI            shift and go to state 93
    ASIG            reduce using rule 45 (ubicacion -> ID .)
    CORI            shift and go to state 92


state 60

    (25) declaracion -> while . relacion do declaracion
    (64) relacion -> . expresion MENQ expresion
    (65) relacion -> . expresion MENIG expresion
    (66) relacion -> . expresion MAYQ expresion
    (67) relacion -> . expresion MAYIG expresion
    (68) relacion -> . expresion IGU expresion
    (69) relacion -> . expresion DIF expresion
    (70) relacion -> . relacion and relacion
    (71) relacion -> . relacion or relacion
    (72) relacion -> . not relacion
    (73) relacion -> . PARI relacion PARD
    (74) relacion -> . error
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    not             shift and go to state 79
    PARI            shift and go to state 77
    error           shift and go to state 81
    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 80
    numero                         shift and go to state 41
    relacion                       shift and go to state 94

state 61

    (42) listadeclaraciones -> declaracion .

    end             reduce using rule 42 (listadeclaraciones -> declaracion .)
    PYC             reduce using rule 42 (listadeclaraciones -> declaracion .)
    while           reduce using rule 42 (listadeclaraciones -> declaracion .)
    print           reduce using rule 42 (listadeclaraciones -> declaracion .)
    write           reduce using rule 42 (listadeclaraciones -> declaracion .)
    read            reduce using rule 42 (listadeclaraciones -> declaracion .)
    return          reduce using rule 42 (listadeclaraciones -> declaracion .)
    ID              reduce using rule 42 (listadeclaraciones -> declaracion .)
    skip            reduce using rule 42 (listadeclaraciones -> declaracion .)
    break           reduce using rule 42 (listadeclaraciones -> declaracion .)
    begin           reduce using rule 42 (listadeclaraciones -> declaracion .)
    if              reduce using rule 42 (listadeclaraciones -> declaracion .)


state 62

    (16) locales -> locales defvar PYC .

    ID              reduce using rule 16 (locales -> locales defvar PYC .)
    fun             reduce using rule 16 (locales -> locales defvar PYC .)
    begin           reduce using rule 16 (locales -> locales defvar PYC .)


state 63

    (17) locales -> locales funcion PYC .

    ID              reduce using rule 17 (locales -> locales funcion PYC .)
    fun             reduce using rule 17 (locales -> locales funcion PYC .)
    begin           reduce using rule 17 (locales -> locales funcion PYC .)


state 64

    (23) tipo -> int CORI expresion CORD .

    COMA            reduce using rule 23 (tipo -> int CORI expresion CORD .)
    ID              reduce using rule 23 (tipo -> int CORI expresion CORD .)
    PARD            reduce using rule 23 (tipo -> int CORI expresion CORD .)
    PYC             reduce using rule 23 (tipo -> int CORI expresion CORD .)


state 65

    (49) expresion -> expresion MULTI . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 95
    numero                         shift and go to state 41

state 66

    (50) expresion -> expresion DIVIDIR . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 96
    numero                         shift and go to state 41

state 67

    (48) expresion -> expresion RESTA . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 97
    numero                         shift and go to state 41

state 68

    (47) expresion -> expresion SUMA . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 98
    numero                         shift and go to state 41

state 69

    (58) expresion -> int PARI . expresion PARD
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 99
    numero                         shift and go to state 41

state 70

    (59) expresion -> float PARI . expresion PARD
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 100
    numero                         shift and go to state 41

state 71

    (53) expresion -> PARI expresion . PARD
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    PARD            shift and go to state 101
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 72

    (51) expresion -> RESTA expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    MENQ            reduce using rule 51 (expresion -> RESTA expresion .)
    MENIG           reduce using rule 51 (expresion -> RESTA expresion .)
    MAYQ            reduce using rule 51 (expresion -> RESTA expresion .)
    MAYIG           reduce using rule 51 (expresion -> RESTA expresion .)
    IGU             reduce using rule 51 (expresion -> RESTA expresion .)
    DIF             reduce using rule 51 (expresion -> RESTA expresion .)
    SUMA            reduce using rule 51 (expresion -> RESTA expresion .)
    RESTA           reduce using rule 51 (expresion -> RESTA expresion .)
    MULTI           reduce using rule 51 (expresion -> RESTA expresion .)
    DIVIDIR         reduce using rule 51 (expresion -> RESTA expresion .)
    then            reduce using rule 51 (expresion -> RESTA expresion .)
    and             reduce using rule 51 (expresion -> RESTA expresion .)
    or              reduce using rule 51 (expresion -> RESTA expresion .)
    while           reduce using rule 51 (expresion -> RESTA expresion .)
    print           reduce using rule 51 (expresion -> RESTA expresion .)
    write           reduce using rule 51 (expresion -> RESTA expresion .)
    read            reduce using rule 51 (expresion -> RESTA expresion .)
    return          reduce using rule 51 (expresion -> RESTA expresion .)
    ID              reduce using rule 51 (expresion -> RESTA expresion .)
    skip            reduce using rule 51 (expresion -> RESTA expresion .)
    break           reduce using rule 51 (expresion -> RESTA expresion .)
    begin           reduce using rule 51 (expresion -> RESTA expresion .)
    if              reduce using rule 51 (expresion -> RESTA expresion .)
    do              reduce using rule 51 (expresion -> RESTA expresion .)
    PARD            reduce using rule 51 (expresion -> RESTA expresion .)
    COMA            reduce using rule 51 (expresion -> RESTA expresion .)
    CORD            reduce using rule 51 (expresion -> RESTA expresion .)
    end             reduce using rule 51 (expresion -> RESTA expresion .)
    PYC             reduce using rule 51 (expresion -> RESTA expresion .)
    else            reduce using rule 51 (expresion -> RESTA expresion .)

  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTI           [ shift and go to state 65 ]
  ! DIVIDIR         [ shift and go to state 66 ]


state 73

    (56) expresion -> ID CORI . expresion CORD
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 102
    numero                         shift and go to state 41

state 74

    (54) expresion -> ID PARI . listadeexpresionesop PARD
    (60) listadeexpresionesop -> . listadeexpresiones
    (61) listadeexpresionesop -> . empty
    (62) listadeexpresiones -> . expresion
    (63) listadeexpresiones -> . listadeexpresiones COMA expresion
    (77) empty -> .
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    PARD            reduce using rule 77 (empty -> .)
    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    listadeexpresionesop           shift and go to state 103
    expresion                      shift and go to state 104
    listadeexpresiones             shift and go to state 105
    numero                         shift and go to state 41
    empty                          shift and go to state 106

state 75

    (52) expresion -> SUMA expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    MENQ            reduce using rule 52 (expresion -> SUMA expresion .)
    MENIG           reduce using rule 52 (expresion -> SUMA expresion .)
    MAYQ            reduce using rule 52 (expresion -> SUMA expresion .)
    MAYIG           reduce using rule 52 (expresion -> SUMA expresion .)
    IGU             reduce using rule 52 (expresion -> SUMA expresion .)
    DIF             reduce using rule 52 (expresion -> SUMA expresion .)
    SUMA            reduce using rule 52 (expresion -> SUMA expresion .)
    RESTA           reduce using rule 52 (expresion -> SUMA expresion .)
    then            reduce using rule 52 (expresion -> SUMA expresion .)
    and             reduce using rule 52 (expresion -> SUMA expresion .)
    or              reduce using rule 52 (expresion -> SUMA expresion .)
    while           reduce using rule 52 (expresion -> SUMA expresion .)
    print           reduce using rule 52 (expresion -> SUMA expresion .)
    write           reduce using rule 52 (expresion -> SUMA expresion .)
    read            reduce using rule 52 (expresion -> SUMA expresion .)
    return          reduce using rule 52 (expresion -> SUMA expresion .)
    ID              reduce using rule 52 (expresion -> SUMA expresion .)
    skip            reduce using rule 52 (expresion -> SUMA expresion .)
    break           reduce using rule 52 (expresion -> SUMA expresion .)
    begin           reduce using rule 52 (expresion -> SUMA expresion .)
    if              reduce using rule 52 (expresion -> SUMA expresion .)
    do              reduce using rule 52 (expresion -> SUMA expresion .)
    PARD            reduce using rule 52 (expresion -> SUMA expresion .)
    COMA            reduce using rule 52 (expresion -> SUMA expresion .)
    CORD            reduce using rule 52 (expresion -> SUMA expresion .)
    end             reduce using rule 52 (expresion -> SUMA expresion .)
    PYC             reduce using rule 52 (expresion -> SUMA expresion .)
    else            reduce using rule 52 (expresion -> SUMA expresion .)
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66

  ! MULTI           [ reduce using rule 52 (expresion -> SUMA expresion .) ]
  ! DIVIDIR         [ reduce using rule 52 (expresion -> SUMA expresion .) ]
  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 67 ]


state 76

    (24) tipo -> float CORI expresion CORD .

    COMA            reduce using rule 24 (tipo -> float CORI expresion CORD .)
    ID              reduce using rule 24 (tipo -> float CORI expresion CORD .)
    PARD            reduce using rule 24 (tipo -> float CORI expresion CORD .)
    PYC             reduce using rule 24 (tipo -> float CORI expresion CORD .)


state 77

    (73) relacion -> PARI . relacion PARD
    (53) expresion -> PARI . expresion PARD
    (64) relacion -> . expresion MENQ expresion
    (65) relacion -> . expresion MENIG expresion
    (66) relacion -> . expresion MAYQ expresion
    (67) relacion -> . expresion MAYIG expresion
    (68) relacion -> . expresion IGU expresion
    (69) relacion -> . expresion DIF expresion
    (70) relacion -> . relacion and relacion
    (71) relacion -> . relacion or relacion
    (72) relacion -> . not relacion
    (73) relacion -> . PARI relacion PARD
    (74) relacion -> . error
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    not             shift and go to state 79
    PARI            shift and go to state 77
    error           shift and go to state 81
    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 108
    relacion                       shift and go to state 107
    numero                         shift and go to state 41

state 78

    (38) ifthen -> if relacion . then declaracion
    (40) ifthen -> if relacion . declaracion
    (41) ifthen -> if relacion . declaracion else declaracion
    (39) ifthenelse -> if relacion . then declaracion else declaracion
    (70) relacion -> relacion . and relacion
    (71) relacion -> relacion . or relacion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    then            shift and go to state 110
    and             shift and go to state 109
    or              shift and go to state 111
    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 112

state 79

    (72) relacion -> not . relacion
    (64) relacion -> . expresion MENQ expresion
    (65) relacion -> . expresion MENIG expresion
    (66) relacion -> . expresion MAYQ expresion
    (67) relacion -> . expresion MAYIG expresion
    (68) relacion -> . expresion IGU expresion
    (69) relacion -> . expresion DIF expresion
    (70) relacion -> . relacion and relacion
    (71) relacion -> . relacion or relacion
    (72) relacion -> . not relacion
    (73) relacion -> . PARI relacion PARD
    (74) relacion -> . error
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    not             shift and go to state 79
    PARI            shift and go to state 77
    error           shift and go to state 81
    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 80
    relacion                       shift and go to state 113
    numero                         shift and go to state 41

state 80

    (64) relacion -> expresion . MENQ expresion
    (65) relacion -> expresion . MENIG expresion
    (66) relacion -> expresion . MAYQ expresion
    (67) relacion -> expresion . MAYIG expresion
    (68) relacion -> expresion . IGU expresion
    (69) relacion -> expresion . DIF expresion
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    MENQ            shift and go to state 116
    MENIG           shift and go to state 117
    MAYQ            shift and go to state 118
    MAYIG           shift and go to state 119
    IGU             shift and go to state 114
    DIF             shift and go to state 115
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 81

    (74) relacion -> error .

    do              reduce using rule 74 (relacion -> error .)
    and             reduce using rule 74 (relacion -> error .)
    or              reduce using rule 74 (relacion -> error .)
    then            reduce using rule 74 (relacion -> error .)
    while           reduce using rule 74 (relacion -> error .)
    print           reduce using rule 74 (relacion -> error .)
    write           reduce using rule 74 (relacion -> error .)
    read            reduce using rule 74 (relacion -> error .)
    return          reduce using rule 74 (relacion -> error .)
    ID              reduce using rule 74 (relacion -> error .)
    skip            reduce using rule 74 (relacion -> error .)
    break           reduce using rule 74 (relacion -> error .)
    begin           reduce using rule 74 (relacion -> error .)
    if              reduce using rule 74 (relacion -> error .)
    PARD            reduce using rule 74 (relacion -> error .)


state 82

    (30) declaracion -> write PARI . expresion PARD
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 120
    numero                         shift and go to state 41

state 83

    (4) funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones end .

    PYC             reduce using rule 4 (funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones end .)
    fun             reduce using rule 4 (funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones end .)
    $end            reduce using rule 4 (funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones end .)


state 84

    (5) funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones PYC . end
    (43) listadeclaraciones -> listadeclaraciones PYC . declaracion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    end             shift and go to state 121
    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 122

state 85

    (44) listadeclaraciones -> listadeclaraciones declaracion .

    end             reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    PYC             reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    while           reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    print           reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    write           reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    read            reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    return          reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    ID              reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    skip            reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    break           reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    begin           reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)
    if              reduce using rule 44 (listadeclaraciones -> listadeclaraciones declaracion .)


state 86

    (29) declaracion -> print PARI . CADENA PARD

    CADENA          shift and go to state 123


state 87

    (37) declaracion -> begin end .

    end             reduce using rule 37 (declaracion -> begin end .)
    PYC             reduce using rule 37 (declaracion -> begin end .)
    while           reduce using rule 37 (declaracion -> begin end .)
    print           reduce using rule 37 (declaracion -> begin end .)
    write           reduce using rule 37 (declaracion -> begin end .)
    read            reduce using rule 37 (declaracion -> begin end .)
    return          reduce using rule 37 (declaracion -> begin end .)
    ID              reduce using rule 37 (declaracion -> begin end .)
    skip            reduce using rule 37 (declaracion -> begin end .)
    break           reduce using rule 37 (declaracion -> begin end .)
    begin           reduce using rule 37 (declaracion -> begin end .)
    if              reduce using rule 37 (declaracion -> begin end .)
    else            reduce using rule 37 (declaracion -> begin end .)


state 88

    (36) declaracion -> begin listadeclaraciones . end
    (43) listadeclaraciones -> listadeclaraciones . PYC declaracion
    (44) listadeclaraciones -> listadeclaraciones . declaracion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    end             shift and go to state 124
    PYC             shift and go to state 125
    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 85

state 89

    (32) declaracion -> return expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    end             reduce using rule 32 (declaracion -> return expresion .)
    PYC             reduce using rule 32 (declaracion -> return expresion .)
    while           reduce using rule 32 (declaracion -> return expresion .)
    print           reduce using rule 32 (declaracion -> return expresion .)
    write           reduce using rule 32 (declaracion -> return expresion .)
    read            reduce using rule 32 (declaracion -> return expresion .)
    return          reduce using rule 32 (declaracion -> return expresion .)
    ID              reduce using rule 32 (declaracion -> return expresion .)
    skip            reduce using rule 32 (declaracion -> return expresion .)
    break           reduce using rule 32 (declaracion -> return expresion .)
    begin           reduce using rule 32 (declaracion -> return expresion .)
    if              reduce using rule 32 (declaracion -> return expresion .)
    else            reduce using rule 32 (declaracion -> return expresion .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 90

    (31) declaracion -> read PARI . ubicacion PARD
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    ID              shift and go to state 127

    ubicacion                      shift and go to state 126

state 91

    (28) declaracion -> ubicacion ASIG . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 128
    numero                         shift and go to state 41

state 92

    (46) ubicacion -> ID CORI . expresion CORD
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 129
    numero                         shift and go to state 41

state 93

    (33) declaracion -> ID PARI . listadeexpresionesop PARD
    (60) listadeexpresionesop -> . listadeexpresiones
    (61) listadeexpresionesop -> . empty
    (62) listadeexpresiones -> . expresion
    (63) listadeexpresiones -> . listadeexpresiones COMA expresion
    (77) empty -> .
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    PARD            reduce using rule 77 (empty -> .)
    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    listadeexpresionesop           shift and go to state 130
    expresion                      shift and go to state 104
    listadeexpresiones             shift and go to state 105
    numero                         shift and go to state 41
    empty                          shift and go to state 106

state 94

    (25) declaracion -> while relacion . do declaracion
    (70) relacion -> relacion . and relacion
    (71) relacion -> relacion . or relacion

    do              shift and go to state 131
    and             shift and go to state 109
    or              shift and go to state 111


state 95

    (49) expresion -> expresion MULTI expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    MENQ            reduce using rule 49 (expresion -> expresion MULTI expresion .)
    MENIG           reduce using rule 49 (expresion -> expresion MULTI expresion .)
    MAYQ            reduce using rule 49 (expresion -> expresion MULTI expresion .)
    MAYIG           reduce using rule 49 (expresion -> expresion MULTI expresion .)
    IGU             reduce using rule 49 (expresion -> expresion MULTI expresion .)
    DIF             reduce using rule 49 (expresion -> expresion MULTI expresion .)
    SUMA            reduce using rule 49 (expresion -> expresion MULTI expresion .)
    RESTA           reduce using rule 49 (expresion -> expresion MULTI expresion .)
    MULTI           reduce using rule 49 (expresion -> expresion MULTI expresion .)
    DIVIDIR         reduce using rule 49 (expresion -> expresion MULTI expresion .)
    then            reduce using rule 49 (expresion -> expresion MULTI expresion .)
    and             reduce using rule 49 (expresion -> expresion MULTI expresion .)
    or              reduce using rule 49 (expresion -> expresion MULTI expresion .)
    while           reduce using rule 49 (expresion -> expresion MULTI expresion .)
    print           reduce using rule 49 (expresion -> expresion MULTI expresion .)
    write           reduce using rule 49 (expresion -> expresion MULTI expresion .)
    read            reduce using rule 49 (expresion -> expresion MULTI expresion .)
    return          reduce using rule 49 (expresion -> expresion MULTI expresion .)
    ID              reduce using rule 49 (expresion -> expresion MULTI expresion .)
    skip            reduce using rule 49 (expresion -> expresion MULTI expresion .)
    break           reduce using rule 49 (expresion -> expresion MULTI expresion .)
    begin           reduce using rule 49 (expresion -> expresion MULTI expresion .)
    if              reduce using rule 49 (expresion -> expresion MULTI expresion .)
    do              reduce using rule 49 (expresion -> expresion MULTI expresion .)
    PARD            reduce using rule 49 (expresion -> expresion MULTI expresion .)
    COMA            reduce using rule 49 (expresion -> expresion MULTI expresion .)
    CORD            reduce using rule 49 (expresion -> expresion MULTI expresion .)
    end             reduce using rule 49 (expresion -> expresion MULTI expresion .)
    PYC             reduce using rule 49 (expresion -> expresion MULTI expresion .)
    else            reduce using rule 49 (expresion -> expresion MULTI expresion .)

  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTI           [ shift and go to state 65 ]
  ! DIVIDIR         [ shift and go to state 66 ]


state 96

    (50) expresion -> expresion DIVIDIR expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    MENQ            reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    MENIG           reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    MAYQ            reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    MAYIG           reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    IGU             reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    DIF             reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    SUMA            reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    RESTA           reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    MULTI           reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    DIVIDIR         reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    then            reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    and             reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    or              reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    while           reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    print           reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    write           reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    read            reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    return          reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    ID              reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    skip            reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    break           reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    begin           reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    if              reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    do              reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    PARD            reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    COMA            reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    CORD            reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    end             reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    PYC             reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)
    else            reduce using rule 50 (expresion -> expresion DIVIDIR expresion .)

  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 67 ]
  ! MULTI           [ shift and go to state 65 ]
  ! DIVIDIR         [ shift and go to state 66 ]


state 97

    (48) expresion -> expresion RESTA expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    MENQ            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    MENIG           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    MAYQ            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    MAYIG           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    IGU             reduce using rule 48 (expresion -> expresion RESTA expresion .)
    DIF             reduce using rule 48 (expresion -> expresion RESTA expresion .)
    SUMA            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    RESTA           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    then            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    and             reduce using rule 48 (expresion -> expresion RESTA expresion .)
    or              reduce using rule 48 (expresion -> expresion RESTA expresion .)
    while           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    print           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    write           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    read            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    return          reduce using rule 48 (expresion -> expresion RESTA expresion .)
    ID              reduce using rule 48 (expresion -> expresion RESTA expresion .)
    skip            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    break           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    begin           reduce using rule 48 (expresion -> expresion RESTA expresion .)
    if              reduce using rule 48 (expresion -> expresion RESTA expresion .)
    do              reduce using rule 48 (expresion -> expresion RESTA expresion .)
    PARD            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    COMA            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    CORD            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    end             reduce using rule 48 (expresion -> expresion RESTA expresion .)
    PYC             reduce using rule 48 (expresion -> expresion RESTA expresion .)
    else            reduce using rule 48 (expresion -> expresion RESTA expresion .)
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66

  ! MULTI           [ reduce using rule 48 (expresion -> expresion RESTA expresion .) ]
  ! DIVIDIR         [ reduce using rule 48 (expresion -> expresion RESTA expresion .) ]
  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 67 ]


state 98

    (47) expresion -> expresion SUMA expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    MENQ            reduce using rule 47 (expresion -> expresion SUMA expresion .)
    MENIG           reduce using rule 47 (expresion -> expresion SUMA expresion .)
    MAYQ            reduce using rule 47 (expresion -> expresion SUMA expresion .)
    MAYIG           reduce using rule 47 (expresion -> expresion SUMA expresion .)
    IGU             reduce using rule 47 (expresion -> expresion SUMA expresion .)
    DIF             reduce using rule 47 (expresion -> expresion SUMA expresion .)
    SUMA            reduce using rule 47 (expresion -> expresion SUMA expresion .)
    RESTA           reduce using rule 47 (expresion -> expresion SUMA expresion .)
    then            reduce using rule 47 (expresion -> expresion SUMA expresion .)
    and             reduce using rule 47 (expresion -> expresion SUMA expresion .)
    or              reduce using rule 47 (expresion -> expresion SUMA expresion .)
    while           reduce using rule 47 (expresion -> expresion SUMA expresion .)
    print           reduce using rule 47 (expresion -> expresion SUMA expresion .)
    write           reduce using rule 47 (expresion -> expresion SUMA expresion .)
    read            reduce using rule 47 (expresion -> expresion SUMA expresion .)
    return          reduce using rule 47 (expresion -> expresion SUMA expresion .)
    ID              reduce using rule 47 (expresion -> expresion SUMA expresion .)
    skip            reduce using rule 47 (expresion -> expresion SUMA expresion .)
    break           reduce using rule 47 (expresion -> expresion SUMA expresion .)
    begin           reduce using rule 47 (expresion -> expresion SUMA expresion .)
    if              reduce using rule 47 (expresion -> expresion SUMA expresion .)
    do              reduce using rule 47 (expresion -> expresion SUMA expresion .)
    PARD            reduce using rule 47 (expresion -> expresion SUMA expresion .)
    COMA            reduce using rule 47 (expresion -> expresion SUMA expresion .)
    CORD            reduce using rule 47 (expresion -> expresion SUMA expresion .)
    end             reduce using rule 47 (expresion -> expresion SUMA expresion .)
    PYC             reduce using rule 47 (expresion -> expresion SUMA expresion .)
    else            reduce using rule 47 (expresion -> expresion SUMA expresion .)
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66

  ! MULTI           [ reduce using rule 47 (expresion -> expresion SUMA expresion .) ]
  ! DIVIDIR         [ reduce using rule 47 (expresion -> expresion SUMA expresion .) ]
  ! SUMA            [ shift and go to state 68 ]
  ! RESTA           [ shift and go to state 67 ]


state 99

    (58) expresion -> int PARI expresion . PARD
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    PARD            shift and go to state 132
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 100

    (59) expresion -> float PARI expresion . PARD
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    PARD            shift and go to state 133
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 101

    (53) expresion -> PARI expresion PARD .

    MENQ            reduce using rule 53 (expresion -> PARI expresion PARD .)
    MENIG           reduce using rule 53 (expresion -> PARI expresion PARD .)
    MAYQ            reduce using rule 53 (expresion -> PARI expresion PARD .)
    MAYIG           reduce using rule 53 (expresion -> PARI expresion PARD .)
    IGU             reduce using rule 53 (expresion -> PARI expresion PARD .)
    DIF             reduce using rule 53 (expresion -> PARI expresion PARD .)
    SUMA            reduce using rule 53 (expresion -> PARI expresion PARD .)
    RESTA           reduce using rule 53 (expresion -> PARI expresion PARD .)
    MULTI           reduce using rule 53 (expresion -> PARI expresion PARD .)
    DIVIDIR         reduce using rule 53 (expresion -> PARI expresion PARD .)
    then            reduce using rule 53 (expresion -> PARI expresion PARD .)
    and             reduce using rule 53 (expresion -> PARI expresion PARD .)
    or              reduce using rule 53 (expresion -> PARI expresion PARD .)
    while           reduce using rule 53 (expresion -> PARI expresion PARD .)
    print           reduce using rule 53 (expresion -> PARI expresion PARD .)
    write           reduce using rule 53 (expresion -> PARI expresion PARD .)
    read            reduce using rule 53 (expresion -> PARI expresion PARD .)
    return          reduce using rule 53 (expresion -> PARI expresion PARD .)
    ID              reduce using rule 53 (expresion -> PARI expresion PARD .)
    skip            reduce using rule 53 (expresion -> PARI expresion PARD .)
    break           reduce using rule 53 (expresion -> PARI expresion PARD .)
    begin           reduce using rule 53 (expresion -> PARI expresion PARD .)
    if              reduce using rule 53 (expresion -> PARI expresion PARD .)
    do              reduce using rule 53 (expresion -> PARI expresion PARD .)
    PARD            reduce using rule 53 (expresion -> PARI expresion PARD .)
    COMA            reduce using rule 53 (expresion -> PARI expresion PARD .)
    CORD            reduce using rule 53 (expresion -> PARI expresion PARD .)
    end             reduce using rule 53 (expresion -> PARI expresion PARD .)
    PYC             reduce using rule 53 (expresion -> PARI expresion PARD .)
    else            reduce using rule 53 (expresion -> PARI expresion PARD .)


state 102

    (56) expresion -> ID CORI expresion . CORD
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    CORD            shift and go to state 134
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 103

    (54) expresion -> ID PARI listadeexpresionesop . PARD

    PARD            shift and go to state 135


state 104

    (62) listadeexpresiones -> expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    COMA            reduce using rule 62 (listadeexpresiones -> expresion .)
    PARD            reduce using rule 62 (listadeexpresiones -> expresion .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 105

    (60) listadeexpresionesop -> listadeexpresiones .
    (63) listadeexpresiones -> listadeexpresiones . COMA expresion

    PARD            reduce using rule 60 (listadeexpresionesop -> listadeexpresiones .)
    COMA            shift and go to state 136


state 106

    (61) listadeexpresionesop -> empty .

    PARD            reduce using rule 61 (listadeexpresionesop -> empty .)


state 107

    (73) relacion -> PARI relacion . PARD
    (70) relacion -> relacion . and relacion
    (71) relacion -> relacion . or relacion

    PARD            shift and go to state 137
    and             shift and go to state 109
    or              shift and go to state 111


state 108

    (53) expresion -> PARI expresion . PARD
    (64) relacion -> expresion . MENQ expresion
    (65) relacion -> expresion . MENIG expresion
    (66) relacion -> expresion . MAYQ expresion
    (67) relacion -> expresion . MAYIG expresion
    (68) relacion -> expresion . IGU expresion
    (69) relacion -> expresion . DIF expresion
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    PARD            shift and go to state 101
    MENQ            shift and go to state 116
    MENIG           shift and go to state 117
    MAYQ            shift and go to state 118
    MAYIG           shift and go to state 119
    IGU             shift and go to state 114
    DIF             shift and go to state 115
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 109

    (70) relacion -> relacion and . relacion
    (64) relacion -> . expresion MENQ expresion
    (65) relacion -> . expresion MENIG expresion
    (66) relacion -> . expresion MAYQ expresion
    (67) relacion -> . expresion MAYIG expresion
    (68) relacion -> . expresion IGU expresion
    (69) relacion -> . expresion DIF expresion
    (70) relacion -> . relacion and relacion
    (71) relacion -> . relacion or relacion
    (72) relacion -> . not relacion
    (73) relacion -> . PARI relacion PARD
    (74) relacion -> . error
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    not             shift and go to state 79
    PARI            shift and go to state 77
    error           shift and go to state 81
    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 80
    relacion                       shift and go to state 138
    numero                         shift and go to state 41

state 110

    (38) ifthen -> if relacion then . declaracion
    (39) ifthenelse -> if relacion then . declaracion else declaracion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 139

state 111

    (71) relacion -> relacion or . relacion
    (64) relacion -> . expresion MENQ expresion
    (65) relacion -> . expresion MENIG expresion
    (66) relacion -> . expresion MAYQ expresion
    (67) relacion -> . expresion MAYIG expresion
    (68) relacion -> . expresion IGU expresion
    (69) relacion -> . expresion DIF expresion
    (70) relacion -> . relacion and relacion
    (71) relacion -> . relacion or relacion
    (72) relacion -> . not relacion
    (73) relacion -> . PARI relacion PARD
    (74) relacion -> . error
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    not             shift and go to state 79
    PARI            shift and go to state 77
    error           shift and go to state 81
    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 80
    relacion                       shift and go to state 140
    numero                         shift and go to state 41

state 112

    (40) ifthen -> if relacion declaracion .
    (41) ifthen -> if relacion declaracion . else declaracion

    end             reduce using rule 40 (ifthen -> if relacion declaracion .)
    PYC             reduce using rule 40 (ifthen -> if relacion declaracion .)
    while           reduce using rule 40 (ifthen -> if relacion declaracion .)
    print           reduce using rule 40 (ifthen -> if relacion declaracion .)
    write           reduce using rule 40 (ifthen -> if relacion declaracion .)
    read            reduce using rule 40 (ifthen -> if relacion declaracion .)
    return          reduce using rule 40 (ifthen -> if relacion declaracion .)
    ID              reduce using rule 40 (ifthen -> if relacion declaracion .)
    skip            reduce using rule 40 (ifthen -> if relacion declaracion .)
    break           reduce using rule 40 (ifthen -> if relacion declaracion .)
    begin           reduce using rule 40 (ifthen -> if relacion declaracion .)
    if              reduce using rule 40 (ifthen -> if relacion declaracion .)
    else            shift and go to state 141

  ! else            [ reduce using rule 40 (ifthen -> if relacion declaracion .) ]


state 113

    (72) relacion -> not relacion .
    (70) relacion -> relacion . and relacion
    (71) relacion -> relacion . or relacion

    do              reduce using rule 72 (relacion -> not relacion .)
    and             reduce using rule 72 (relacion -> not relacion .)
    or              reduce using rule 72 (relacion -> not relacion .)
    then            reduce using rule 72 (relacion -> not relacion .)
    while           reduce using rule 72 (relacion -> not relacion .)
    print           reduce using rule 72 (relacion -> not relacion .)
    write           reduce using rule 72 (relacion -> not relacion .)
    read            reduce using rule 72 (relacion -> not relacion .)
    return          reduce using rule 72 (relacion -> not relacion .)
    ID              reduce using rule 72 (relacion -> not relacion .)
    skip            reduce using rule 72 (relacion -> not relacion .)
    break           reduce using rule 72 (relacion -> not relacion .)
    begin           reduce using rule 72 (relacion -> not relacion .)
    if              reduce using rule 72 (relacion -> not relacion .)
    PARD            reduce using rule 72 (relacion -> not relacion .)

  ! and             [ shift and go to state 109 ]
  ! or              [ shift and go to state 111 ]


state 114

    (68) relacion -> expresion IGU . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 142
    numero                         shift and go to state 41

state 115

    (69) relacion -> expresion DIF . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 143
    numero                         shift and go to state 41

state 116

    (64) relacion -> expresion MENQ . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 144
    numero                         shift and go to state 41

state 117

    (65) relacion -> expresion MENIG . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 145
    numero                         shift and go to state 41

state 118

    (66) relacion -> expresion MAYQ . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 146
    numero                         shift and go to state 41

state 119

    (67) relacion -> expresion MAYIG . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 147
    numero                         shift and go to state 41

state 120

    (30) declaracion -> write PARI expresion . PARD
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    PARD            shift and go to state 148
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 121

    (5) funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones PYC end .

    PYC             reduce using rule 5 (funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones PYC end .)
    fun             reduce using rule 5 (funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones PYC end .)
    $end            reduce using rule 5 (funcion -> fun ID PARI argsop PARD localesop begin listadeclaraciones PYC end .)


state 122

    (43) listadeclaraciones -> listadeclaraciones PYC declaracion .

    end             reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    PYC             reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    while           reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    print           reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    write           reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    read            reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    return          reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    ID              reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    skip            reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    break           reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    begin           reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)
    if              reduce using rule 43 (listadeclaraciones -> listadeclaraciones PYC declaracion .)


state 123

    (29) declaracion -> print PARI CADENA . PARD

    PARD            shift and go to state 149


state 124

    (36) declaracion -> begin listadeclaraciones end .

    end             reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    PYC             reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    while           reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    print           reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    write           reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    read            reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    return          reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    ID              reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    skip            reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    break           reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    begin           reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    if              reduce using rule 36 (declaracion -> begin listadeclaraciones end .)
    else            reduce using rule 36 (declaracion -> begin listadeclaraciones end .)


state 125

    (43) listadeclaraciones -> listadeclaraciones PYC . declaracion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 122

state 126

    (31) declaracion -> read PARI ubicacion . PARD

    PARD            shift and go to state 150


state 127

    (45) ubicacion -> ID .
    (46) ubicacion -> ID . CORI expresion CORD

    PARD            reduce using rule 45 (ubicacion -> ID .)
    CORI            shift and go to state 92


state 128

    (28) declaracion -> ubicacion ASIG expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    end             reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    PYC             reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    while           reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    print           reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    write           reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    read            reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    return          reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    ID              reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    skip            reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    break           reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    begin           reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    if              reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    else            reduce using rule 28 (declaracion -> ubicacion ASIG expresion .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 129

    (46) ubicacion -> ID CORI expresion . CORD
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    CORD            shift and go to state 151
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 130

    (33) declaracion -> ID PARI listadeexpresionesop . PARD

    PARD            shift and go to state 152


state 131

    (25) declaracion -> while relacion do . declaracion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 153

state 132

    (58) expresion -> int PARI expresion PARD .

    MENQ            reduce using rule 58 (expresion -> int PARI expresion PARD .)
    MENIG           reduce using rule 58 (expresion -> int PARI expresion PARD .)
    MAYQ            reduce using rule 58 (expresion -> int PARI expresion PARD .)
    MAYIG           reduce using rule 58 (expresion -> int PARI expresion PARD .)
    IGU             reduce using rule 58 (expresion -> int PARI expresion PARD .)
    DIF             reduce using rule 58 (expresion -> int PARI expresion PARD .)
    SUMA            reduce using rule 58 (expresion -> int PARI expresion PARD .)
    RESTA           reduce using rule 58 (expresion -> int PARI expresion PARD .)
    MULTI           reduce using rule 58 (expresion -> int PARI expresion PARD .)
    DIVIDIR         reduce using rule 58 (expresion -> int PARI expresion PARD .)
    then            reduce using rule 58 (expresion -> int PARI expresion PARD .)
    and             reduce using rule 58 (expresion -> int PARI expresion PARD .)
    or              reduce using rule 58 (expresion -> int PARI expresion PARD .)
    while           reduce using rule 58 (expresion -> int PARI expresion PARD .)
    print           reduce using rule 58 (expresion -> int PARI expresion PARD .)
    write           reduce using rule 58 (expresion -> int PARI expresion PARD .)
    read            reduce using rule 58 (expresion -> int PARI expresion PARD .)
    return          reduce using rule 58 (expresion -> int PARI expresion PARD .)
    ID              reduce using rule 58 (expresion -> int PARI expresion PARD .)
    skip            reduce using rule 58 (expresion -> int PARI expresion PARD .)
    break           reduce using rule 58 (expresion -> int PARI expresion PARD .)
    begin           reduce using rule 58 (expresion -> int PARI expresion PARD .)
    if              reduce using rule 58 (expresion -> int PARI expresion PARD .)
    do              reduce using rule 58 (expresion -> int PARI expresion PARD .)
    PARD            reduce using rule 58 (expresion -> int PARI expresion PARD .)
    COMA            reduce using rule 58 (expresion -> int PARI expresion PARD .)
    CORD            reduce using rule 58 (expresion -> int PARI expresion PARD .)
    end             reduce using rule 58 (expresion -> int PARI expresion PARD .)
    PYC             reduce using rule 58 (expresion -> int PARI expresion PARD .)
    else            reduce using rule 58 (expresion -> int PARI expresion PARD .)


state 133

    (59) expresion -> float PARI expresion PARD .

    MENQ            reduce using rule 59 (expresion -> float PARI expresion PARD .)
    MENIG           reduce using rule 59 (expresion -> float PARI expresion PARD .)
    MAYQ            reduce using rule 59 (expresion -> float PARI expresion PARD .)
    MAYIG           reduce using rule 59 (expresion -> float PARI expresion PARD .)
    IGU             reduce using rule 59 (expresion -> float PARI expresion PARD .)
    DIF             reduce using rule 59 (expresion -> float PARI expresion PARD .)
    SUMA            reduce using rule 59 (expresion -> float PARI expresion PARD .)
    RESTA           reduce using rule 59 (expresion -> float PARI expresion PARD .)
    MULTI           reduce using rule 59 (expresion -> float PARI expresion PARD .)
    DIVIDIR         reduce using rule 59 (expresion -> float PARI expresion PARD .)
    then            reduce using rule 59 (expresion -> float PARI expresion PARD .)
    and             reduce using rule 59 (expresion -> float PARI expresion PARD .)
    or              reduce using rule 59 (expresion -> float PARI expresion PARD .)
    while           reduce using rule 59 (expresion -> float PARI expresion PARD .)
    print           reduce using rule 59 (expresion -> float PARI expresion PARD .)
    write           reduce using rule 59 (expresion -> float PARI expresion PARD .)
    read            reduce using rule 59 (expresion -> float PARI expresion PARD .)
    return          reduce using rule 59 (expresion -> float PARI expresion PARD .)
    ID              reduce using rule 59 (expresion -> float PARI expresion PARD .)
    skip            reduce using rule 59 (expresion -> float PARI expresion PARD .)
    break           reduce using rule 59 (expresion -> float PARI expresion PARD .)
    begin           reduce using rule 59 (expresion -> float PARI expresion PARD .)
    if              reduce using rule 59 (expresion -> float PARI expresion PARD .)
    do              reduce using rule 59 (expresion -> float PARI expresion PARD .)
    PARD            reduce using rule 59 (expresion -> float PARI expresion PARD .)
    COMA            reduce using rule 59 (expresion -> float PARI expresion PARD .)
    CORD            reduce using rule 59 (expresion -> float PARI expresion PARD .)
    end             reduce using rule 59 (expresion -> float PARI expresion PARD .)
    PYC             reduce using rule 59 (expresion -> float PARI expresion PARD .)
    else            reduce using rule 59 (expresion -> float PARI expresion PARD .)


state 134

    (56) expresion -> ID CORI expresion CORD .

    MENQ            reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    MENIG           reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    MAYQ            reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    MAYIG           reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    IGU             reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    DIF             reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    SUMA            reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    RESTA           reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    MULTI           reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    DIVIDIR         reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    then            reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    and             reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    or              reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    while           reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    print           reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    write           reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    read            reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    return          reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    ID              reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    skip            reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    break           reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    begin           reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    if              reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    do              reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    PARD            reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    COMA            reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    CORD            reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    end             reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    PYC             reduce using rule 56 (expresion -> ID CORI expresion CORD .)
    else            reduce using rule 56 (expresion -> ID CORI expresion CORD .)


state 135

    (54) expresion -> ID PARI listadeexpresionesop PARD .

    MENQ            reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    MENIG           reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    MAYQ            reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    MAYIG           reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    IGU             reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    DIF             reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    SUMA            reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    RESTA           reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    MULTI           reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    DIVIDIR         reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    then            reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    and             reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    or              reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    while           reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    print           reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    write           reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    read            reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    return          reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    ID              reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    skip            reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    break           reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    begin           reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    if              reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    do              reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    PARD            reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    COMA            reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    CORD            reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    end             reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    PYC             reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)
    else            reduce using rule 54 (expresion -> ID PARI listadeexpresionesop PARD .)


state 136

    (63) listadeexpresiones -> listadeexpresiones COMA . expresion
    (47) expresion -> . expresion SUMA expresion
    (48) expresion -> . expresion RESTA expresion
    (49) expresion -> . expresion MULTI expresion
    (50) expresion -> . expresion DIVIDIR expresion
    (51) expresion -> . RESTA expresion
    (52) expresion -> . SUMA expresion
    (53) expresion -> . PARI expresion PARD
    (54) expresion -> . ID PARI listadeexpresionesop PARD
    (55) expresion -> . ID
    (56) expresion -> . ID CORI expresion CORD
    (57) expresion -> . numero
    (58) expresion -> . int PARI expresion PARD
    (59) expresion -> . float PARI expresion PARD
    (75) numero -> . ENTERO
    (76) numero -> . REAL

    RESTA           shift and go to state 42
    SUMA            shift and go to state 44
    PARI            shift and go to state 40
    ID              shift and go to state 43
    int             shift and go to state 37
    float           shift and go to state 39
    ENTERO          shift and go to state 45
    REAL            shift and go to state 38

    expresion                      shift and go to state 154
    numero                         shift and go to state 41

state 137

    (73) relacion -> PARI relacion PARD .

    do              reduce using rule 73 (relacion -> PARI relacion PARD .)
    and             reduce using rule 73 (relacion -> PARI relacion PARD .)
    or              reduce using rule 73 (relacion -> PARI relacion PARD .)
    then            reduce using rule 73 (relacion -> PARI relacion PARD .)
    while           reduce using rule 73 (relacion -> PARI relacion PARD .)
    print           reduce using rule 73 (relacion -> PARI relacion PARD .)
    write           reduce using rule 73 (relacion -> PARI relacion PARD .)
    read            reduce using rule 73 (relacion -> PARI relacion PARD .)
    return          reduce using rule 73 (relacion -> PARI relacion PARD .)
    ID              reduce using rule 73 (relacion -> PARI relacion PARD .)
    skip            reduce using rule 73 (relacion -> PARI relacion PARD .)
    break           reduce using rule 73 (relacion -> PARI relacion PARD .)
    begin           reduce using rule 73 (relacion -> PARI relacion PARD .)
    if              reduce using rule 73 (relacion -> PARI relacion PARD .)
    PARD            reduce using rule 73 (relacion -> PARI relacion PARD .)


state 138

    (70) relacion -> relacion and relacion .
    (70) relacion -> relacion . and relacion
    (71) relacion -> relacion . or relacion

    do              reduce using rule 70 (relacion -> relacion and relacion .)
    and             reduce using rule 70 (relacion -> relacion and relacion .)
    or              reduce using rule 70 (relacion -> relacion and relacion .)
    then            reduce using rule 70 (relacion -> relacion and relacion .)
    while           reduce using rule 70 (relacion -> relacion and relacion .)
    print           reduce using rule 70 (relacion -> relacion and relacion .)
    write           reduce using rule 70 (relacion -> relacion and relacion .)
    read            reduce using rule 70 (relacion -> relacion and relacion .)
    return          reduce using rule 70 (relacion -> relacion and relacion .)
    ID              reduce using rule 70 (relacion -> relacion and relacion .)
    skip            reduce using rule 70 (relacion -> relacion and relacion .)
    break           reduce using rule 70 (relacion -> relacion and relacion .)
    begin           reduce using rule 70 (relacion -> relacion and relacion .)
    if              reduce using rule 70 (relacion -> relacion and relacion .)
    PARD            reduce using rule 70 (relacion -> relacion and relacion .)

  ! and             [ shift and go to state 109 ]
  ! or              [ shift and go to state 111 ]


state 139

    (38) ifthen -> if relacion then declaracion .
    (39) ifthenelse -> if relacion then declaracion . else declaracion

    end             reduce using rule 38 (ifthen -> if relacion then declaracion .)
    PYC             reduce using rule 38 (ifthen -> if relacion then declaracion .)
    while           reduce using rule 38 (ifthen -> if relacion then declaracion .)
    print           reduce using rule 38 (ifthen -> if relacion then declaracion .)
    write           reduce using rule 38 (ifthen -> if relacion then declaracion .)
    read            reduce using rule 38 (ifthen -> if relacion then declaracion .)
    return          reduce using rule 38 (ifthen -> if relacion then declaracion .)
    ID              reduce using rule 38 (ifthen -> if relacion then declaracion .)
    skip            reduce using rule 38 (ifthen -> if relacion then declaracion .)
    break           reduce using rule 38 (ifthen -> if relacion then declaracion .)
    begin           reduce using rule 38 (ifthen -> if relacion then declaracion .)
    if              reduce using rule 38 (ifthen -> if relacion then declaracion .)
    else            shift and go to state 155

  ! else            [ reduce using rule 38 (ifthen -> if relacion then declaracion .) ]


state 140

    (71) relacion -> relacion or relacion .
    (70) relacion -> relacion . and relacion
    (71) relacion -> relacion . or relacion

    do              reduce using rule 71 (relacion -> relacion or relacion .)
    or              reduce using rule 71 (relacion -> relacion or relacion .)
    then            reduce using rule 71 (relacion -> relacion or relacion .)
    while           reduce using rule 71 (relacion -> relacion or relacion .)
    print           reduce using rule 71 (relacion -> relacion or relacion .)
    write           reduce using rule 71 (relacion -> relacion or relacion .)
    read            reduce using rule 71 (relacion -> relacion or relacion .)
    return          reduce using rule 71 (relacion -> relacion or relacion .)
    ID              reduce using rule 71 (relacion -> relacion or relacion .)
    skip            reduce using rule 71 (relacion -> relacion or relacion .)
    break           reduce using rule 71 (relacion -> relacion or relacion .)
    begin           reduce using rule 71 (relacion -> relacion or relacion .)
    if              reduce using rule 71 (relacion -> relacion or relacion .)
    PARD            reduce using rule 71 (relacion -> relacion or relacion .)
    and             shift and go to state 109

  ! and             [ reduce using rule 71 (relacion -> relacion or relacion .) ]
  ! or              [ shift and go to state 111 ]


state 141

    (41) ifthen -> if relacion declaracion else . declaracion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 156

state 142

    (68) relacion -> expresion IGU expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    do              reduce using rule 68 (relacion -> expresion IGU expresion .)
    and             reduce using rule 68 (relacion -> expresion IGU expresion .)
    or              reduce using rule 68 (relacion -> expresion IGU expresion .)
    then            reduce using rule 68 (relacion -> expresion IGU expresion .)
    while           reduce using rule 68 (relacion -> expresion IGU expresion .)
    print           reduce using rule 68 (relacion -> expresion IGU expresion .)
    write           reduce using rule 68 (relacion -> expresion IGU expresion .)
    read            reduce using rule 68 (relacion -> expresion IGU expresion .)
    return          reduce using rule 68 (relacion -> expresion IGU expresion .)
    ID              reduce using rule 68 (relacion -> expresion IGU expresion .)
    skip            reduce using rule 68 (relacion -> expresion IGU expresion .)
    break           reduce using rule 68 (relacion -> expresion IGU expresion .)
    begin           reduce using rule 68 (relacion -> expresion IGU expresion .)
    if              reduce using rule 68 (relacion -> expresion IGU expresion .)
    PARD            reduce using rule 68 (relacion -> expresion IGU expresion .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 143

    (69) relacion -> expresion DIF expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    do              reduce using rule 69 (relacion -> expresion DIF expresion .)
    and             reduce using rule 69 (relacion -> expresion DIF expresion .)
    or              reduce using rule 69 (relacion -> expresion DIF expresion .)
    then            reduce using rule 69 (relacion -> expresion DIF expresion .)
    while           reduce using rule 69 (relacion -> expresion DIF expresion .)
    print           reduce using rule 69 (relacion -> expresion DIF expresion .)
    write           reduce using rule 69 (relacion -> expresion DIF expresion .)
    read            reduce using rule 69 (relacion -> expresion DIF expresion .)
    return          reduce using rule 69 (relacion -> expresion DIF expresion .)
    ID              reduce using rule 69 (relacion -> expresion DIF expresion .)
    skip            reduce using rule 69 (relacion -> expresion DIF expresion .)
    break           reduce using rule 69 (relacion -> expresion DIF expresion .)
    begin           reduce using rule 69 (relacion -> expresion DIF expresion .)
    if              reduce using rule 69 (relacion -> expresion DIF expresion .)
    PARD            reduce using rule 69 (relacion -> expresion DIF expresion .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 144

    (64) relacion -> expresion MENQ expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    do              reduce using rule 64 (relacion -> expresion MENQ expresion .)
    and             reduce using rule 64 (relacion -> expresion MENQ expresion .)
    or              reduce using rule 64 (relacion -> expresion MENQ expresion .)
    then            reduce using rule 64 (relacion -> expresion MENQ expresion .)
    while           reduce using rule 64 (relacion -> expresion MENQ expresion .)
    print           reduce using rule 64 (relacion -> expresion MENQ expresion .)
    write           reduce using rule 64 (relacion -> expresion MENQ expresion .)
    read            reduce using rule 64 (relacion -> expresion MENQ expresion .)
    return          reduce using rule 64 (relacion -> expresion MENQ expresion .)
    ID              reduce using rule 64 (relacion -> expresion MENQ expresion .)
    skip            reduce using rule 64 (relacion -> expresion MENQ expresion .)
    break           reduce using rule 64 (relacion -> expresion MENQ expresion .)
    begin           reduce using rule 64 (relacion -> expresion MENQ expresion .)
    if              reduce using rule 64 (relacion -> expresion MENQ expresion .)
    PARD            reduce using rule 64 (relacion -> expresion MENQ expresion .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 145

    (65) relacion -> expresion MENIG expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    do              reduce using rule 65 (relacion -> expresion MENIG expresion .)
    and             reduce using rule 65 (relacion -> expresion MENIG expresion .)
    or              reduce using rule 65 (relacion -> expresion MENIG expresion .)
    then            reduce using rule 65 (relacion -> expresion MENIG expresion .)
    while           reduce using rule 65 (relacion -> expresion MENIG expresion .)
    print           reduce using rule 65 (relacion -> expresion MENIG expresion .)
    write           reduce using rule 65 (relacion -> expresion MENIG expresion .)
    read            reduce using rule 65 (relacion -> expresion MENIG expresion .)
    return          reduce using rule 65 (relacion -> expresion MENIG expresion .)
    ID              reduce using rule 65 (relacion -> expresion MENIG expresion .)
    skip            reduce using rule 65 (relacion -> expresion MENIG expresion .)
    break           reduce using rule 65 (relacion -> expresion MENIG expresion .)
    begin           reduce using rule 65 (relacion -> expresion MENIG expresion .)
    if              reduce using rule 65 (relacion -> expresion MENIG expresion .)
    PARD            reduce using rule 65 (relacion -> expresion MENIG expresion .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 146

    (66) relacion -> expresion MAYQ expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    do              reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    and             reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    or              reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    then            reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    while           reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    print           reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    write           reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    read            reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    return          reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    ID              reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    skip            reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    break           reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    begin           reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    if              reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    PARD            reduce using rule 66 (relacion -> expresion MAYQ expresion .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 147

    (67) relacion -> expresion MAYIG expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    do              reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    and             reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    or              reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    then            reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    while           reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    print           reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    write           reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    read            reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    return          reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    ID              reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    skip            reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    break           reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    begin           reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    if              reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    PARD            reduce using rule 67 (relacion -> expresion MAYIG expresion .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 148

    (30) declaracion -> write PARI expresion PARD .

    end             reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    PYC             reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    while           reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    print           reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    write           reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    read            reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    return          reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    ID              reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    skip            reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    break           reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    begin           reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    if              reduce using rule 30 (declaracion -> write PARI expresion PARD .)
    else            reduce using rule 30 (declaracion -> write PARI expresion PARD .)


state 149

    (29) declaracion -> print PARI CADENA PARD .

    end             reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    PYC             reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    while           reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    print           reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    write           reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    read            reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    return          reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    ID              reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    skip            reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    break           reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    begin           reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    if              reduce using rule 29 (declaracion -> print PARI CADENA PARD .)
    else            reduce using rule 29 (declaracion -> print PARI CADENA PARD .)


state 150

    (31) declaracion -> read PARI ubicacion PARD .

    end             reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    PYC             reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    while           reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    print           reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    write           reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    read            reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    return          reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    ID              reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    skip            reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    break           reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    begin           reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    if              reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)
    else            reduce using rule 31 (declaracion -> read PARI ubicacion PARD .)


state 151

    (46) ubicacion -> ID CORI expresion CORD .

    PARD            reduce using rule 46 (ubicacion -> ID CORI expresion CORD .)
    ASIG            reduce using rule 46 (ubicacion -> ID CORI expresion CORD .)


state 152

    (33) declaracion -> ID PARI listadeexpresionesop PARD .

    end             reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    PYC             reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    while           reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    print           reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    write           reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    read            reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    return          reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    ID              reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    skip            reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    break           reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    begin           reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    if              reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)
    else            reduce using rule 33 (declaracion -> ID PARI listadeexpresionesop PARD .)


state 153

    (25) declaracion -> while relacion do declaracion .

    end             reduce using rule 25 (declaracion -> while relacion do declaracion .)
    PYC             reduce using rule 25 (declaracion -> while relacion do declaracion .)
    while           reduce using rule 25 (declaracion -> while relacion do declaracion .)
    print           reduce using rule 25 (declaracion -> while relacion do declaracion .)
    write           reduce using rule 25 (declaracion -> while relacion do declaracion .)
    read            reduce using rule 25 (declaracion -> while relacion do declaracion .)
    return          reduce using rule 25 (declaracion -> while relacion do declaracion .)
    ID              reduce using rule 25 (declaracion -> while relacion do declaracion .)
    skip            reduce using rule 25 (declaracion -> while relacion do declaracion .)
    break           reduce using rule 25 (declaracion -> while relacion do declaracion .)
    begin           reduce using rule 25 (declaracion -> while relacion do declaracion .)
    if              reduce using rule 25 (declaracion -> while relacion do declaracion .)
    else            reduce using rule 25 (declaracion -> while relacion do declaracion .)


state 154

    (63) listadeexpresiones -> listadeexpresiones COMA expresion .
    (47) expresion -> expresion . SUMA expresion
    (48) expresion -> expresion . RESTA expresion
    (49) expresion -> expresion . MULTI expresion
    (50) expresion -> expresion . DIVIDIR expresion

    COMA            reduce using rule 63 (listadeexpresiones -> listadeexpresiones COMA expresion .)
    PARD            reduce using rule 63 (listadeexpresiones -> listadeexpresiones COMA expresion .)
    SUMA            shift and go to state 68
    RESTA           shift and go to state 67
    MULTI           shift and go to state 65
    DIVIDIR         shift and go to state 66


state 155

    (39) ifthenelse -> if relacion then declaracion else . declaracion
    (25) declaracion -> . while relacion do declaracion
    (26) declaracion -> . ifthen
    (27) declaracion -> . ifthenelse
    (28) declaracion -> . ubicacion ASIG expresion
    (29) declaracion -> . print PARI CADENA PARD
    (30) declaracion -> . write PARI expresion PARD
    (31) declaracion -> . read PARI ubicacion PARD
    (32) declaracion -> . return expresion
    (33) declaracion -> . ID PARI listadeexpresionesop PARD
    (34) declaracion -> . skip
    (35) declaracion -> . break
    (36) declaracion -> . begin listadeclaraciones end
    (37) declaracion -> . begin end
    (38) ifthen -> . if relacion then declaracion
    (40) ifthen -> . if relacion declaracion
    (41) ifthen -> . if relacion declaracion else declaracion
    (39) ifthenelse -> . if relacion then declaracion else declaracion
    (45) ubicacion -> . ID
    (46) ubicacion -> . ID CORI expresion CORD

    while           shift and go to state 60
    print           shift and go to state 52
    write           shift and go to state 50
    read            shift and go to state 56
    return          shift and go to state 54
    ID              shift and go to state 59
    skip            shift and go to state 47
    break           shift and go to state 57
    begin           shift and go to state 53
    if              shift and go to state 49

    ifthenelse                     shift and go to state 55
    ubicacion                      shift and go to state 58
    ifthen                         shift and go to state 48
    declaracion                    shift and go to state 157

state 156

    (41) ifthen -> if relacion declaracion else declaracion .

    end             reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    PYC             reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    while           reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    print           reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    write           reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    read            reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    return          reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    ID              reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    skip            reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    break           reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    begin           reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    if              reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)
    else            reduce using rule 41 (ifthen -> if relacion declaracion else declaracion .)


state 157

    (39) ifthenelse -> if relacion then declaracion else declaracion .

    end             reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    PYC             reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    while           reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    print           reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    write           reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    read            reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    return          reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    ID              reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    skip            reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    break           reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    begin           reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    if              reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)
    else            reduce using rule 39 (ifthenelse -> if relacion then declaracion else declaracion .)

