
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '$\xcb\xe3T8\xe4\xf7\xba\x9b\xa1\xf7\xf7\xfd\xe07\x1d'
    
_lr_action_items = {'DO':([38,39,43,44,46,70,77,78,80,92,93,94,95,96,103,128,129,130,131,132,133,134,135,136,],[-54,-56,-57,-51,-55,-50,98,-39,-46,-49,-53,-52,-48,-47,-38,-37,-36,147,-40,-45,-42,-44,-41,-43,]),'RETURN':([34,86,91,98,121,154,],[47,47,47,47,47,47,]),'LPAREN':([6,33,38,39,40,41,43,44,46,47,48,49,51,56,60,61,70,73,74,79,81,83,85,87,88,90,92,93,94,95,96,99,100,104,105,106,107,108,109,118,119,125,126,],[7,40,-54,-56,40,40,-57,-51,-55,40,76,79,83,85,88,90,-50,40,40,40,40,40,40,40,40,40,-49,-53,-52,-48,-47,40,40,40,40,40,40,40,40,40,-55,40,40,]),'FLOAT_TYPE':([13,16,33,],[19,19,19,]),'READ':([34,86,91,98,121,154,],[48,48,48,48,48,48,]),'THEN':([38,39,43,44,46,70,78,80,89,92,93,94,95,96,103,128,129,131,132,133,134,135,136,146,],[-54,-56,-57,-51,-55,-50,-39,-46,121,-49,-53,-52,-48,-47,-38,-37,-36,-40,-45,-42,-44,-41,-43,148,]),'STRING_TYPE':([13,16,33,],[20,20,20,]),'UMINUS':([33,38,39,40,41,43,44,46,47,49,61,70,73,74,79,81,83,85,87,88,90,92,93,94,95,96,99,100,104,105,106,107,108,109,118,119,125,126,],[41,-54,-56,41,41,-57,-51,-55,41,41,41,-50,41,41,41,41,41,41,41,41,41,-49,-53,-52,-48,-47,41,41,41,41,41,41,41,41,41,41,41,41,]),'WHILE':([34,86,91,98,121,154,],[49,49,49,125,125,49,]),'INT_TYPE':([13,16,33,],[21,21,21,]),'PRINT':([34,86,91,98,121,154,],[51,51,51,51,51,51,]),'MINUS':([38,39,43,44,45,46,69,70,75,82,92,93,94,95,96,102,111,112,114,116,118,119,131,132,133,134,135,136,],[-54,-56,-57,-51,73,-55,73,73,73,73,-49,-53,-52,-48,-47,73,73,-55,73,73,73,-55,73,73,73,73,73,73,]),'STRING':([83,85,],[110,113,]),'BEGIN':([8,12,14,17,18,19,20,21,22,25,28,31,32,36,37,147,148,],[-6,-8,-6,-6,-72,-70,-71,-69,-7,-13,34,-6,-6,34,-12,34,34,]),'LE':([38,39,43,44,46,70,82,92,93,94,95,96,102,],[-54,-56,-57,-51,-55,-50,109,-49,-53,-52,-48,-47,109,]),'RPAREN':([7,9,11,18,19,20,21,29,30,38,39,43,44,46,69,70,78,80,88,92,93,94,95,96,97,101,102,103,110,111,112,113,114,117,118,119,120,122,128,129,131,132,133,134,135,136,143,144,],[8,-11,17,-72,-70,-71,-69,-10,-16,-54,-56,-57,-51,-55,92,-50,-39,-46,-6,-49,-53,-52,-48,-47,124,130,92,-38,137,138,139,140,141,142,-6,-6,-68,146,-37,-36,-40,-45,-42,-44,-41,-43,-67,-66,]),'SEMICOLON':([18,19,20,21,23,24,26,30,38,39,42,43,44,45,46,50,52,54,55,57,58,59,62,63,64,65,66,67,70,75,84,86,91,92,93,94,95,96,115,116,123,124,127,137,138,139,140,141,142,145,149,150,151,152,153,154,155,156,],[-72,-70,-71,-69,-15,32,-14,-16,-54,-56,-17,-57,-51,-18,-55,-25,-29,-21,-31,86,-26,-33,-24,-30,-28,-27,91,-32,-50,-58,-9,-6,-6,-49,-53,-52,-48,-47,-19,-75,-20,-61,-74,-63,-62,-64,-60,-59,-65,-73,151,-6,-22,155,-35,-6,-23,-34,]),'NE':([38,39,43,44,46,70,82,92,93,94,95,96,102,],[-54,-56,-57,-51,-55,-50,107,-49,-53,-52,-48,-47,107,]),'PLUS':([38,39,43,44,45,46,69,70,75,82,92,93,94,95,96,102,111,112,114,116,118,119,131,132,133,134,135,136,],[-54,-56,-57,-51,74,-55,74,74,74,74,-49,-53,-52,-48,-47,74,74,-55,74,74,74,-55,74,74,74,74,74,74,]),'LT':([38,39,43,44,46,70,82,92,93,94,95,96,102,],[-54,-56,-57,-51,-55,-50,108,-49,-53,-52,-48,-47,108,]),'COLON':([8,10,17,27,],[13,16,13,16,]),'SKIP':([34,86,91,98,121,154,],[55,55,55,55,55,55,]),'INTEGER':([33,38,39,40,41,43,44,46,47,49,61,70,71,72,73,74,79,81,83,85,87,88,90,92,93,94,95,96,99,100,104,105,106,107,108,109,118,119,125,126,],[43,-54,-56,43,43,-57,-51,-55,43,43,43,-50,43,43,43,43,43,43,43,43,43,43,43,-49,-53,-52,-48,-47,43,43,43,43,43,43,43,43,43,-55,43,43,]),'$end':([1,3,4,5,35,68,84,],[-2,0,-1,-3,-5,-4,-9,]),'GT':([38,39,43,44,46,70,82,92,93,94,95,96,102,],[-54,-56,-57,-51,-55,-50,104,-49,-53,-52,-48,-47,104,]),'END':([34,53,54,86,91,115,123,],[-6,84,-21,-6,-6,-19,-20,]),'DIVIDE':([38,39,43,44,46,93,94,112,119,],[-54,-56,-57,71,-55,-53,-52,-55,-55,]),'COLONEQUAL':([27,],[33,]),'TIMES':([38,39,43,44,46,93,94,112,119,],[-54,-56,-57,72,-55,-53,-52,-55,-55,]),'WRITE':([34,86,91,98,121,154,],[56,56,56,56,56,56,]),'GE':([38,39,43,44,46,70,82,92,93,94,95,96,102,],[-54,-56,-57,-51,-55,-50,106,-49,-53,-52,-48,-47,106,]),'FUNC':([0,1,35,68,84,],[2,2,-5,-4,-9,]),'ELSE':([84,150,],[-9,154,]),'EQ':([38,39,43,44,46,60,70,82,92,93,94,95,96,102,],[-54,-56,-57,-51,-55,87,-50,105,-49,-53,-52,-48,-47,105,]),'ID':([2,7,8,12,14,15,17,18,19,20,21,22,31,32,33,34,38,39,40,41,43,44,46,47,49,61,70,71,72,73,74,76,79,81,83,85,86,87,88,90,91,92,93,94,95,96,98,99,100,104,105,106,107,108,109,118,119,121,125,126,154,],[6,10,-6,-8,27,10,-6,-72,-70,-71,-69,-7,27,27,46,60,-54,-56,46,46,-57,-51,-55,46,46,46,-50,46,46,46,46,97,46,46,112,46,60,46,119,46,60,-49,-53,-52,-48,-47,60,46,46,46,46,46,46,46,46,119,-55,60,46,46,60,]),'IF':([34,86,91,98,121,154,],[61,61,61,126,126,61,]),'AND':([38,39,43,44,46,70,78,80,92,93,94,95,96,131,132,133,134,135,136,],[-54,-56,-57,-51,-55,-50,99,-46,-49,-53,-52,-48,-47,-40,-45,-42,-44,-41,-43,]),'BOOLEAN_TYPE':([13,16,33,],[18,18,18,]),'FLOAT':([33,38,39,40,41,43,44,46,47,49,61,70,71,72,73,74,79,81,83,85,87,88,90,92,93,94,95,96,99,100,104,105,106,107,108,109,118,119,125,126,],[39,-54,-56,39,39,-57,-51,-55,39,39,39,-50,39,39,39,39,39,39,39,39,39,39,39,-49,-53,-52,-48,-47,39,39,39,39,39,39,39,39,39,-55,39,39,]),'BREAK':([34,86,91,98,121,154,],[67,67,67,67,67,67,]),'BOOLEAN':([49,61,79,81,90,99,100,125,126,],[80,80,80,80,80,80,80,80,80,]),'NOT':([49,61,79,90,125,126,],[81,81,81,81,81,81,]),'COMMA':([9,18,19,20,21,30,],[15,-72,-70,-71,-69,-16,]),'OR':([38,39,43,44,46,70,78,80,92,93,94,95,96,131,132,133,134,135,136,],[-54,-56,-57,-51,-55,-50,100,-46,-49,-53,-52,-48,-47,-40,-45,-42,-44,-41,-43,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'list_var':([88,118,119,],[117,143,144,]),'conditional':([49,61,79,90,125,126,],[77,89,101,122,77,89,]),'read_d':([34,86,91,98,121,154,],[50,50,50,50,50,50,]),'print_d':([34,86,91,98,121,154,],[52,52,52,52,52,52,]),'locals':([14,31,32,],[28,36,37,]),'initial':([0,],[3,]),'program':([0,1,],[4,5,]),'local_list':([14,31,32,],[24,24,24,]),'var':([7,14,15,31,32,],[9,26,9,26,26,]),'prod':([33,40,41,47,49,61,71,72,73,74,79,81,83,85,87,88,90,99,100,104,105,106,107,108,109,118,119,125,126,],[44,44,44,44,44,44,93,94,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'type':([13,16,33,],[22,30,42,]),'empty':([8,14,17,31,32,34,86,88,91,118,119,150,154,],[12,25,12,25,25,54,54,120,54,120,120,153,54,]),'arg_list':([7,15,],[11,29,]),'function':([0,1,],[1,1,]),'statement':([34,86,91,154,],[53,115,123,156,]),'bool_expr':([49,61,79,81,90,99,100,125,126,],[78,78,78,103,78,128,129,78,78,]),'call_d':([34,86,91,98,121,154,],[59,59,59,59,59,59,]),'controlstructure':([34,86,91,154,],[57,57,57,57,]),'write_d':([34,86,91,98,121,154,],[62,62,62,62,62,62,]),'else':([150,],[152,]),'assignation':([34,86,91,98,121,154,],[63,63,63,63,63,63,]),'term':([33,40,41,47,49,61,71,72,73,74,79,81,83,85,87,88,90,99,100,104,105,106,107,108,109,118,119,125,126,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'var_dec_as':([14,31,32,],[23,23,23,]),'return_f':([8,17,],[14,31,]),'return_d':([34,86,91,98,121,154,],[64,64,64,64,64,64,]),'line_while':([34,86,91,98,121,154,],[65,65,65,65,65,65,]),'instruction':([34,86,91,98,121,154,],[66,66,66,127,145,66,]),'line_if':([34,86,91,98,121,154,],[58,58,58,58,58,58,]),'expression':([33,40,41,47,49,61,73,74,79,81,83,85,87,88,90,99,100,104,105,106,107,108,109,118,119,125,126,],[45,69,70,75,82,82,95,96,102,82,111,114,116,118,102,82,82,131,132,133,134,135,136,118,118,82,82,]),'block':([28,36,147,148,],[35,68,149,150,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> initial","S'",1,None,None,None),
  ('initial -> program','initial',1,'p_initial','mpasparse.py',30),
  ('program -> function','program',1,'p_program','mpasparse.py',36),
  ('program -> function program','program',2,'p_program','mpasparse.py',37),
  ('function -> FUNC ID LPAREN arg_list RPAREN return_f locals block','function',8,'p_function','mpasparse.py',47),
  ('function -> FUNC ID LPAREN RPAREN return_f locals block','function',7,'p_function','mpasparse.py',48),
  ('empty -> <empty>','empty',0,'p_empty','mpasparse.py',57),
  ('return_f -> COLON type','return_f',2,'p_return_f','mpasparse.py',63),
  ('return_f -> empty','return_f',1,'p_return_f','mpasparse.py',64),
  ('block -> BEGIN statement END','block',3,'p_block','mpasparse.py',73),
  ('arg_list -> var COMMA arg_list','arg_list',3,'p_arg_list','mpasparse.py',79),
  ('arg_list -> var','arg_list',1,'p_arg_list','mpasparse.py',80),
  ('locals -> local_list SEMICOLON locals','locals',3,'p_locals','mpasparse.py',91),
  ('locals -> empty','locals',1,'p_locals','mpasparse.py',92),
  ('local_list -> var','local_list',1,'p_local_list','mpasparse.py',102),
  ('local_list -> var_dec_as','local_list',1,'p_local_list','mpasparse.py',103),
  ('var -> ID COLON type','var',3,'p_var','mpasparse.py',110),
  ('var_dec_as -> ID COLONEQUAL type','var_dec_as',3,'p_var_dec_as','mpasparse.py',116),
  ('var_dec_as -> ID COLONEQUAL expression','var_dec_as',3,'p_var_dec_as','mpasparse.py',117),
  ('statement -> controlstructure SEMICOLON statement','statement',3,'p_statement','mpasparse.py',124),
  ('statement -> instruction SEMICOLON statement','statement',3,'p_statement','mpasparse.py',125),
  ('statement -> empty','statement',1,'p_statement','mpasparse.py',126),
  ('controlstructure -> WHILE LPAREN conditional RPAREN DO block SEMICOLON','controlstructure',7,'p_controlstructure','mpasparse.py',136),
  ('controlstructure -> IF LPAREN conditional RPAREN THEN block else SEMICOLON','controlstructure',8,'p_controlstructure','mpasparse.py',137),
  ('instruction -> write_d','instruction',1,'p_instruction','mpasparse.py',146),
  ('instruction -> read_d','instruction',1,'p_instruction','mpasparse.py',147),
  ('instruction -> line_if','instruction',1,'p_instruction','mpasparse.py',148),
  ('instruction -> line_while','instruction',1,'p_instruction','mpasparse.py',149),
  ('instruction -> return_d','instruction',1,'p_instruction','mpasparse.py',150),
  ('instruction -> print_d','instruction',1,'p_instruction','mpasparse.py',151),
  ('instruction -> assignation','instruction',1,'p_instruction','mpasparse.py',152),
  ('instruction -> SKIP','instruction',1,'p_instruction','mpasparse.py',153),
  ('instruction -> BREAK','instruction',1,'p_instruction','mpasparse.py',154),
  ('instruction -> call_d','instruction',1,'p_instruction','mpasparse.py',155),
  ('else -> ELSE statement','else',2,'p_else','mpasparse.py',161),
  ('else -> empty','else',1,'p_else','mpasparse.py',162),
  ('conditional -> bool_expr OR bool_expr','conditional',3,'p_conditional','mpasparse.py',171),
  ('conditional -> bool_expr AND bool_expr','conditional',3,'p_conditional','mpasparse.py',172),
  ('conditional -> NOT bool_expr','conditional',2,'p_conditional','mpasparse.py',173),
  ('conditional -> bool_expr','conditional',1,'p_conditional','mpasparse.py',174),
  ('bool_expr -> expression GT expression','bool_expr',3,'p_bool_expr','mpasparse.py',188),
  ('bool_expr -> expression LT expression','bool_expr',3,'p_bool_expr','mpasparse.py',189),
  ('bool_expr -> expression GE expression','bool_expr',3,'p_bool_expr','mpasparse.py',190),
  ('bool_expr -> expression LE expression','bool_expr',3,'p_bool_expr','mpasparse.py',191),
  ('bool_expr -> expression NE expression','bool_expr',3,'p_bool_expr','mpasparse.py',192),
  ('bool_expr -> expression EQ expression','bool_expr',3,'p_bool_expr','mpasparse.py',193),
  ('bool_expr -> BOOLEAN','bool_expr',1,'p_bool_expr','mpasparse.py',194),
  ('expression -> expression PLUS expression','expression',3,'p_expression','mpasparse.py',221),
  ('expression -> expression MINUS expression','expression',3,'p_expression','mpasparse.py',222),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','mpasparse.py',223),
  ('expression -> UMINUS expression','expression',2,'p_expression','mpasparse.py',224),
  ('expression -> prod','expression',1,'p_expression','mpasparse.py',225),
  ('prod -> prod TIMES prod','prod',3,'p_prod','mpasparse.py',242),
  ('prod -> prod DIVIDE prod','prod',3,'p_prod','mpasparse.py',243),
  ('prod -> term','prod',1,'p_prod','mpasparse.py',244),
  ('term -> ID','term',1,'p_term','mpasparse.py',256),
  ('term -> FLOAT','term',1,'p_term','mpasparse.py',257),
  ('term -> INTEGER','term',1,'p_term','mpasparse.py',258),
  ('return_d -> RETURN expression','return_d',2,'p_return_d','mpasparse.py',264),
  ('write_d -> WRITE LPAREN expression RPAREN','write_d',4,'p_write_d','mpasparse.py',271),
  ('write_d -> WRITE LPAREN STRING RPAREN','write_d',4,'p_write_d','mpasparse.py',272),
  ('read_d -> READ LPAREN ID RPAREN','read_d',4,'p_read_d','mpasparse.py',278),
  ('print_d -> PRINT LPAREN expression RPAREN','print_d',4,'p_print_d','mpasparse.py',285),
  ('print_d -> PRINT LPAREN STRING RPAREN','print_d',4,'p_print_d','mpasparse.py',286),
  ('print_d -> PRINT LPAREN ID RPAREN','print_d',4,'p_print_d','mpasparse.py',287),
  ('call_d -> ID LPAREN list_var RPAREN','call_d',4,'p_call_d','mpasparse.py',293),
  ('list_var -> ID list_var','list_var',2,'p_list_var','mpasparse.py',299),
  ('list_var -> expression list_var','list_var',2,'p_list_var','mpasparse.py',300),
  ('list_var -> empty','list_var',1,'p_list_var','mpasparse.py',301),
  ('type -> INT_TYPE','type',1,'p_type','mpasparse.py',312),
  ('type -> FLOAT_TYPE','type',1,'p_type','mpasparse.py',313),
  ('type -> STRING_TYPE','type',1,'p_type','mpasparse.py',314),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','mpasparse.py',315),
  ('line_if -> IF conditional THEN instruction','line_if',4,'p_line_if','mpasparse.py',321),
  ('line_while -> WHILE conditional DO instruction','line_while',4,'p_line_while','mpasparse.py',327),
  ('assignation -> ID EQ expression','assignation',3,'p_assignation','mpasparse.py',333),
]
