
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x06\xd8\xe0\tnA-\x89\xaf+\xdb\xa1\x9d*\xcf<'
    
_lr_action_items = {'DO':([38,39,43,44,46,70,78,79,81,93,94,95,96,97,104,129,130,131,132,133,134,135,136,137,],[-54,-56,-57,-51,-55,-50,99,-39,-46,-49,-53,-52,-48,-47,-38,-37,-36,149,-40,-45,-42,-44,-41,-43,]),'RETURN':([34,87,92,99,122,157,],[47,47,47,47,47,47,]),'LPAREN':([6,33,38,39,40,41,43,44,46,47,48,49,51,56,60,61,70,80,82,84,86,88,89,91,93,94,95,96,97,100,101,105,106,107,108,109,110,119,120,126,127,145,150,],[7,40,-54,-56,40,40,-57,-51,-55,40,77,80,84,86,89,91,-50,40,40,40,40,40,40,40,-49,-53,-52,-48,-47,40,40,40,40,40,40,40,40,40,40,40,40,40,-48,]),'FLOAT_TYPE':([13,16,33,],[19,19,19,]),'READ':([34,87,92,99,122,157,],[48,48,48,48,48,48,]),'THEN':([38,39,43,44,46,70,79,81,90,93,94,95,96,97,104,129,130,132,133,134,135,136,137,148,],[-54,-56,-57,-51,-55,-50,-39,-46,122,-49,-53,-52,-48,-47,-38,-37,-36,-40,-45,-42,-44,-41,-43,151,]),'STRING_TYPE':([13,16,33,],[20,20,20,]),'WHILE':([34,87,92,99,122,157,],[49,49,49,126,126,49,]),'INT_TYPE':([13,16,33,],[21,21,21,]),'PRINT':([34,87,92,99,122,157,],[51,51,51,51,51,51,]),'MINUS':([33,38,39,40,41,43,44,45,46,47,49,61,69,70,75,76,80,82,83,84,86,88,89,91,93,94,95,96,97,100,101,103,105,106,107,108,109,110,112,113,115,117,119,120,126,127,132,133,134,135,136,137,145,150,],[41,-54,-56,41,41,-57,-51,73,-55,41,41,41,73,-50,73,-55,41,41,73,41,41,41,41,41,-49,-53,-52,-48,-47,41,41,73,41,41,41,41,41,41,73,-55,73,73,145,41,41,41,73,73,73,73,73,73,41,-48,]),'STRING':([84,86,],[111,114,]),'BEGIN':([8,12,14,17,18,19,20,21,22,25,28,31,32,36,37,149,151,],[-6,-8,-6,-6,-73,-71,-72,-70,-7,-13,34,-6,-6,34,-12,34,34,]),'LE':([38,39,43,44,46,70,83,93,94,95,96,97,103,],[-54,-56,-57,-51,-55,-50,110,-49,-53,-52,-48,-47,110,]),'RPAREN':([7,9,11,18,19,20,21,29,30,38,39,43,44,46,69,70,79,81,89,93,94,95,96,97,98,102,103,104,111,112,113,114,115,118,119,120,121,123,129,130,132,133,134,135,136,137,144,146,150,],[8,-11,17,-73,-71,-72,-70,-10,-16,-54,-56,-57,-51,-55,93,-50,-39,-46,-6,-49,-53,-52,-48,-47,125,131,93,-38,138,139,140,141,142,143,-6,-6,-69,148,-37,-36,-40,-45,-42,-44,-41,-43,-68,-67,-48,]),'SEMICOLON':([18,19,20,21,23,24,26,30,38,39,42,43,44,45,46,50,52,54,55,57,58,59,62,63,64,65,66,67,70,75,76,85,87,92,93,94,95,96,97,116,117,124,125,128,138,139,140,141,142,143,147,152,153,154,155,156,157,158,159,],[-73,-71,-72,-70,-15,32,-14,-16,-54,-56,-17,-57,-51,-18,-55,-25,-29,-21,-31,87,-26,-33,-24,-30,-28,-27,92,-32,-50,-58,-55,-9,-6,-6,-49,-53,-52,-48,-47,-19,-76,-20,-62,-75,-64,-63,-65,-61,-60,-66,-74,154,-6,-22,158,-35,-6,-23,-34,]),'NE':([38,39,43,44,46,70,83,93,94,95,96,97,103,],[-54,-56,-57,-51,-55,-50,108,-49,-53,-52,-48,-47,108,]),'PLUS':([38,39,43,44,45,46,69,70,75,76,83,93,94,95,96,97,103,112,113,115,117,119,120,132,133,134,135,136,137,150,],[-54,-56,-57,-51,74,-55,74,-50,74,-55,74,-49,-53,-52,-48,-47,74,74,-55,74,74,74,-55,74,74,74,74,74,74,-48,]),'LT':([38,39,43,44,46,70,83,93,94,95,96,97,103,],[-54,-56,-57,-51,-55,-50,109,-49,-53,-52,-48,-47,109,]),'COLON':([8,10,17,27,],[13,16,13,16,]),'SKIP':([34,87,92,99,122,157,],[55,55,55,55,55,55,]),'INTEGER':([33,38,39,40,41,43,44,46,47,49,61,70,71,72,73,74,80,82,84,86,88,89,91,93,94,95,96,97,100,101,105,106,107,108,109,110,119,120,126,127,145,150,],[43,-54,-56,43,43,-57,-51,-55,43,43,43,-50,43,43,43,43,43,43,43,43,43,43,43,-49,-53,-52,-48,-47,43,43,43,43,43,43,43,43,43,43,43,43,43,-48,]),'$end':([1,3,4,5,35,68,85,],[-2,0,-1,-3,-5,-4,-9,]),'GT':([38,39,43,44,46,70,83,93,94,95,96,97,103,],[-54,-56,-57,-51,-55,-50,105,-49,-53,-52,-48,-47,105,]),'END':([34,53,54,87,92,116,124,],[-6,85,-21,-6,-6,-19,-20,]),'DIVIDE':([38,39,43,44,46,76,94,95,96,97,113,120,150,],[-54,-56,-57,71,-55,-55,-53,-52,71,71,-55,-55,71,]),'COLONEQUAL':([27,],[33,]),'TIMES':([38,39,43,44,46,76,94,95,96,97,113,120,150,],[-54,-56,-57,72,-55,-55,-53,-52,72,72,-55,-55,72,]),'WRITE':([34,87,92,99,122,157,],[56,56,56,56,56,56,]),'GE':([38,39,43,44,46,70,83,93,94,95,96,97,103,],[-54,-56,-57,-51,-55,-50,107,-49,-53,-52,-48,-47,107,]),'FUNC':([0,1,35,68,85,],[2,2,-5,-4,-9,]),'ELSE':([85,153,],[-9,157,]),'EQ':([38,39,43,44,46,60,70,83,93,94,95,96,97,103,],[-54,-56,-57,-51,-55,88,-50,106,-49,-53,-52,-48,-47,106,]),'ID':([2,7,8,12,14,15,17,18,19,20,21,22,31,32,33,34,38,39,40,41,43,44,46,47,49,61,70,71,72,73,74,77,80,82,84,86,87,88,89,91,92,93,94,95,96,97,99,100,101,105,106,107,108,109,110,119,120,122,126,127,145,150,157,],[6,10,-6,-8,27,10,-6,-73,-71,-72,-70,-7,27,27,46,60,-54,-56,46,46,-57,-51,-55,76,46,46,-50,46,46,46,46,98,46,46,113,46,60,46,120,46,60,-49,-53,-52,-48,-47,60,46,46,46,46,46,46,46,46,120,120,60,46,46,46,-48,60,]),'IF':([34,87,92,99,122,157,],[61,61,61,127,127,61,]),'AND':([38,39,43,44,46,70,79,81,93,94,95,96,97,132,133,134,135,136,137,],[-54,-56,-57,-51,-55,-50,100,-46,-49,-53,-52,-48,-47,-40,-45,-42,-44,-41,-43,]),'BOOLEAN_TYPE':([13,16,33,],[18,18,18,]),'FLOAT':([33,38,39,40,41,43,44,46,47,49,61,70,71,72,73,74,80,82,84,86,88,89,91,93,94,95,96,97,100,101,105,106,107,108,109,110,119,120,126,127,145,150,],[39,-54,-56,39,39,-57,-51,-55,39,39,39,-50,39,39,39,39,39,39,39,39,39,39,39,-49,-53,-52,-48,-47,39,39,39,39,39,39,39,39,39,39,39,39,39,-48,]),'BREAK':([34,87,92,99,122,157,],[67,67,67,67,67,67,]),'BOOLEAN':([49,61,80,82,91,100,101,126,127,],[81,81,81,81,81,81,81,81,81,]),'NOT':([49,61,80,91,126,127,],[82,82,82,82,82,82,]),'COMMA':([9,18,19,20,21,30,],[15,-73,-71,-72,-70,-16,]),'OR':([38,39,43,44,46,70,79,81,93,94,95,96,97,132,133,134,135,136,137,],[-54,-56,-57,-51,-55,-50,101,-46,-49,-53,-52,-48,-47,-40,-45,-42,-44,-41,-43,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'list_var':([89,119,120,],[118,144,146,]),'conditional':([49,61,80,91,126,127,],[78,90,102,123,78,90,]),'read_d':([34,87,92,99,122,157,],[50,50,50,50,50,50,]),'print_d':([34,87,92,99,122,157,],[52,52,52,52,52,52,]),'locals':([14,31,32,],[28,36,37,]),'initial':([0,],[3,]),'program':([0,1,],[4,5,]),'local_list':([14,31,32,],[24,24,24,]),'var':([7,14,15,31,32,],[9,26,9,26,26,]),'prod':([33,40,41,47,49,61,73,74,80,82,84,86,88,89,91,100,101,105,106,107,108,109,110,119,120,126,127,145,],[44,44,44,44,44,44,96,97,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,150,]),'type':([13,16,33,],[22,30,42,]),'empty':([8,14,17,31,32,34,87,89,92,119,120,153,157,],[12,25,12,25,25,54,54,121,54,121,121,156,54,]),'arg_list':([7,15,],[11,29,]),'function':([0,1,],[1,1,]),'statement':([34,87,92,157,],[53,116,124,159,]),'bool_expr':([49,61,80,82,91,100,101,126,127,],[79,79,79,104,79,129,130,79,79,]),'call_d':([34,87,92,99,122,157,],[59,59,59,59,59,59,]),'controlstructure':([34,87,92,157,],[57,57,57,57,]),'write_d':([34,87,92,99,122,157,],[62,62,62,62,62,62,]),'else':([153,],[155,]),'assignation':([34,87,92,99,122,157,],[63,63,63,63,63,63,]),'term':([33,40,41,47,49,61,71,72,73,74,80,82,84,86,88,89,91,100,101,105,106,107,108,109,110,119,120,126,127,145,],[38,38,38,38,38,38,94,95,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'var_dec_as':([14,31,32,],[23,23,23,]),'return_f':([8,17,],[14,31,]),'return_d':([34,87,92,99,122,157,],[64,64,64,64,64,64,]),'line_while':([34,87,92,99,122,157,],[65,65,65,65,65,65,]),'instruction':([34,87,92,99,122,157,],[66,66,66,128,147,66,]),'line_if':([34,87,92,99,122,157,],[58,58,58,58,58,58,]),'expression':([33,40,41,47,49,61,80,82,84,86,88,89,91,100,101,105,106,107,108,109,110,119,120,126,127,145,],[45,69,70,75,83,83,103,83,112,115,117,119,103,83,83,132,133,134,135,136,137,119,119,83,83,70,]),'block':([28,36,149,151,],[35,68,152,153,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> initial","S'",1,None,None,None),
  ('initial -> program','initial',1,'p_initial','mpasparse.py',27),
  ('program -> function','program',1,'p_program','mpasparse.py',33),
  ('program -> function program','program',2,'p_program','mpasparse.py',34),
  ('function -> FUNC ID LPAREN arg_list RPAREN return_f locals block','function',8,'p_function','mpasparse.py',44),
  ('function -> FUNC ID LPAREN RPAREN return_f locals block','function',7,'p_function','mpasparse.py',45),
  ('empty -> <empty>','empty',0,'p_empty','mpasparse.py',54),
  ('return_f -> COLON type','return_f',2,'p_return_f','mpasparse.py',60),
  ('return_f -> empty','return_f',1,'p_return_f','mpasparse.py',61),
  ('block -> BEGIN statement END','block',3,'p_block','mpasparse.py',70),
  ('arg_list -> var COMMA arg_list','arg_list',3,'p_arg_list','mpasparse.py',76),
  ('arg_list -> var','arg_list',1,'p_arg_list','mpasparse.py',77),
  ('locals -> local_list SEMICOLON locals','locals',3,'p_locals','mpasparse.py',88),
  ('locals -> empty','locals',1,'p_locals','mpasparse.py',89),
  ('local_list -> var','local_list',1,'p_local_list','mpasparse.py',99),
  ('local_list -> var_dec_as','local_list',1,'p_local_list','mpasparse.py',100),
  ('var -> ID COLON type','var',3,'p_var','mpasparse.py',107),
  ('var_dec_as -> ID COLONEQUAL type','var_dec_as',3,'p_var_dec_as','mpasparse.py',113),
  ('var_dec_as -> ID COLONEQUAL expression','var_dec_as',3,'p_var_dec_as','mpasparse.py',114),
  ('statement -> controlstructure SEMICOLON statement','statement',3,'p_statement','mpasparse.py',121),
  ('statement -> instruction SEMICOLON statement','statement',3,'p_statement','mpasparse.py',122),
  ('statement -> empty','statement',1,'p_statement','mpasparse.py',123),
  ('controlstructure -> WHILE LPAREN conditional RPAREN DO block SEMICOLON','controlstructure',7,'p_controlstructure','mpasparse.py',133),
  ('controlstructure -> IF LPAREN conditional RPAREN THEN block else SEMICOLON','controlstructure',8,'p_controlstructure','mpasparse.py',134),
  ('instruction -> write_d','instruction',1,'p_instruction','mpasparse.py',143),
  ('instruction -> read_d','instruction',1,'p_instruction','mpasparse.py',144),
  ('instruction -> line_if','instruction',1,'p_instruction','mpasparse.py',145),
  ('instruction -> line_while','instruction',1,'p_instruction','mpasparse.py',146),
  ('instruction -> return_d','instruction',1,'p_instruction','mpasparse.py',147),
  ('instruction -> print_d','instruction',1,'p_instruction','mpasparse.py',148),
  ('instruction -> assignation','instruction',1,'p_instruction','mpasparse.py',149),
  ('instruction -> SKIP','instruction',1,'p_instruction','mpasparse.py',150),
  ('instruction -> BREAK','instruction',1,'p_instruction','mpasparse.py',151),
  ('instruction -> call_d','instruction',1,'p_instruction','mpasparse.py',152),
  ('else -> ELSE statement','else',2,'p_else','mpasparse.py',158),
  ('else -> empty','else',1,'p_else','mpasparse.py',159),
  ('conditional -> bool_expr OR bool_expr','conditional',3,'p_conditional','mpasparse.py',168),
  ('conditional -> bool_expr AND bool_expr','conditional',3,'p_conditional','mpasparse.py',169),
  ('conditional -> NOT bool_expr','conditional',2,'p_conditional','mpasparse.py',170),
  ('conditional -> bool_expr','conditional',1,'p_conditional','mpasparse.py',171),
  ('bool_expr -> expression GT expression','bool_expr',3,'p_bool_expr','mpasparse.py',185),
  ('bool_expr -> expression LT expression','bool_expr',3,'p_bool_expr','mpasparse.py',186),
  ('bool_expr -> expression GE expression','bool_expr',3,'p_bool_expr','mpasparse.py',187),
  ('bool_expr -> expression LE expression','bool_expr',3,'p_bool_expr','mpasparse.py',188),
  ('bool_expr -> expression NE expression','bool_expr',3,'p_bool_expr','mpasparse.py',189),
  ('bool_expr -> expression EQ expression','bool_expr',3,'p_bool_expr','mpasparse.py',190),
  ('bool_expr -> BOOLEAN','bool_expr',1,'p_bool_expr','mpasparse.py',191),
  ('expression -> expression PLUS prod','expression',3,'p_expression','mpasparse.py',218),
  ('expression -> expression MINUS prod','expression',3,'p_expression','mpasparse.py',219),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','mpasparse.py',220),
  ('expression -> MINUS expression','expression',2,'p_expression','mpasparse.py',221),
  ('expression -> prod','expression',1,'p_expression','mpasparse.py',222),
  ('prod -> prod TIMES term','prod',3,'p_prod','mpasparse.py',238),
  ('prod -> prod DIVIDE term','prod',3,'p_prod','mpasparse.py',239),
  ('prod -> term','prod',1,'p_prod','mpasparse.py',240),
  ('term -> ID','term',1,'p_term','mpasparse.py',252),
  ('term -> FLOAT','term',1,'p_term','mpasparse.py',253),
  ('term -> INTEGER','term',1,'p_term','mpasparse.py',254),
  ('return_d -> RETURN expression','return_d',2,'p_return_d','mpasparse.py',260),
  ('return_d -> RETURN ID','return_d',2,'p_return_d','mpasparse.py',261),
  ('write_d -> WRITE LPAREN expression RPAREN','write_d',4,'p_write_d','mpasparse.py',267),
  ('write_d -> WRITE LPAREN STRING RPAREN','write_d',4,'p_write_d','mpasparse.py',268),
  ('read_d -> READ LPAREN ID RPAREN','read_d',4,'p_read_d','mpasparse.py',274),
  ('print_d -> PRINT LPAREN expression RPAREN','print_d',4,'p_print_d','mpasparse.py',281),
  ('print_d -> PRINT LPAREN STRING RPAREN','print_d',4,'p_print_d','mpasparse.py',282),
  ('print_d -> PRINT LPAREN ID RPAREN','print_d',4,'p_print_d','mpasparse.py',283),
  ('call_d -> ID LPAREN list_var RPAREN','call_d',4,'p_call_d','mpasparse.py',289),
  ('list_var -> ID list_var','list_var',2,'p_list_var','mpasparse.py',295),
  ('list_var -> expression list_var','list_var',2,'p_list_var','mpasparse.py',296),
  ('list_var -> empty','list_var',1,'p_list_var','mpasparse.py',297),
  ('type -> INT_TYPE','type',1,'p_type','mpasparse.py',308),
  ('type -> FLOAT_TYPE','type',1,'p_type','mpasparse.py',309),
  ('type -> STRING_TYPE','type',1,'p_type','mpasparse.py',310),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','mpasparse.py',311),
  ('line_if -> IF conditional THEN instruction','line_if',4,'p_line_if','mpasparse.py',317),
  ('line_while -> WHILE conditional DO instruction','line_while',4,'p_line_while','mpasparse.py',323),
  ('assignation -> ID EQ expression','assignation',3,'p_assignation','mpasparse.py',329),
]
